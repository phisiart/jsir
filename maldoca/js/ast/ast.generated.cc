// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// =============================================================================
// STOP!! DO NOT MODIFY!! THIS FILE IS AUTOMATICALLY GENERATED.
// =============================================================================

#include "maldoca/js/ast/ast.generated.h"

// IWYU pragma: begin_keep
// NOLINTBEGIN(whitespace/line_length)
// clang-format off

#include <cstdint>
#include <memory>
#include <optional>
#include <string>
#include <utility>
#include <variant>
#include <vector>

#include "absl/container/flat_hash_map.h"
#include "absl/memory/memory.h"
#include "absl/log/log.h"
#include "absl/status/status.h"
#include "absl/status/statusor.h"
#include "absl/strings/str_cat.h"
#include "absl/strings/string_view.h"
#include "nlohmann/json.hpp"
#include "maldoca/base/status_macros.h"

namespace maldoca {

absl::string_view JsUnaryOperatorToString(JsUnaryOperator unary_operator) {
  switch (unary_operator) {
    case JsUnaryOperator::kMinus:
      return "-";
    case JsUnaryOperator::kPlus:
      return "+";
    case JsUnaryOperator::kNot:
      return "!";
    case JsUnaryOperator::kBitwiseNot:
      return "~";
    case JsUnaryOperator::kTypeOf:
      return "typeof";
    case JsUnaryOperator::kVoid:
      return "void";
    case JsUnaryOperator::kDelete:
      return "delete";
    case JsUnaryOperator::kThrow:
      return "throw";
  }
}

absl::StatusOr<JsUnaryOperator> StringToJsUnaryOperator(absl::string_view s) {
  static const auto *kMap = new absl::flat_hash_map<absl::string_view, JsUnaryOperator> {
      {"-", JsUnaryOperator::kMinus},
      {"+", JsUnaryOperator::kPlus},
      {"!", JsUnaryOperator::kNot},
      {"~", JsUnaryOperator::kBitwiseNot},
      {"typeof", JsUnaryOperator::kTypeOf},
      {"void", JsUnaryOperator::kVoid},
      {"delete", JsUnaryOperator::kDelete},
      {"throw", JsUnaryOperator::kThrow},
  };

  auto it = kMap->find(s);
  if (it == kMap->end()) {
    return absl::InvalidArgumentError(absl::StrCat("Invalid string for JsUnaryOperator: ", s));
  }
  return it->second;
}

absl::string_view JsUpdateOperatorToString(JsUpdateOperator update_operator) {
  switch (update_operator) {
    case JsUpdateOperator::kIncrement:
      return "++";
    case JsUpdateOperator::kDecrement:
      return "--";
  }
}

absl::StatusOr<JsUpdateOperator> StringToJsUpdateOperator(absl::string_view s) {
  static const auto *kMap = new absl::flat_hash_map<absl::string_view, JsUpdateOperator> {
      {"++", JsUpdateOperator::kIncrement},
      {"--", JsUpdateOperator::kDecrement},
  };

  auto it = kMap->find(s);
  if (it == kMap->end()) {
    return absl::InvalidArgumentError(absl::StrCat("Invalid string for JsUpdateOperator: ", s));
  }
  return it->second;
}

absl::string_view JsBinaryOperatorToString(JsBinaryOperator binary_operator) {
  switch (binary_operator) {
    case JsBinaryOperator::kEqual:
      return "==";
    case JsBinaryOperator::kNotEqual:
      return "!=";
    case JsBinaryOperator::kStrictEqual:
      return "===";
    case JsBinaryOperator::kStrictNotEqual:
      return "!==";
    case JsBinaryOperator::kLessThan:
      return "<";
    case JsBinaryOperator::kLessEqual:
      return "<=";
    case JsBinaryOperator::kGreaterThan:
      return ">";
    case JsBinaryOperator::kGreaterEqual:
      return ">=";
    case JsBinaryOperator::kLeftShift:
      return "<<";
    case JsBinaryOperator::kRightShift:
      return ">>";
    case JsBinaryOperator::kUnsignedRightShift:
      return ">>>";
    case JsBinaryOperator::kAdd:
      return "+";
    case JsBinaryOperator::kSubtract:
      return "-";
    case JsBinaryOperator::kMultiply:
      return "*";
    case JsBinaryOperator::kDivide:
      return "/";
    case JsBinaryOperator::kMod:
      return "%";
    case JsBinaryOperator::kExp:
      return "**";
    case JsBinaryOperator::kBitwiseOr:
      return "|";
    case JsBinaryOperator::kBitwiseXor:
      return "^";
    case JsBinaryOperator::kBitwiseAnd:
      return "&";
    case JsBinaryOperator::kIn:
      return "in";
    case JsBinaryOperator::kInstanceOf:
      return "instanceof";
    case JsBinaryOperator::kPipeline:
      return "|>";
  }
}

absl::StatusOr<JsBinaryOperator> StringToJsBinaryOperator(absl::string_view s) {
  static const auto *kMap = new absl::flat_hash_map<absl::string_view, JsBinaryOperator> {
      {"==", JsBinaryOperator::kEqual},
      {"!=", JsBinaryOperator::kNotEqual},
      {"===", JsBinaryOperator::kStrictEqual},
      {"!==", JsBinaryOperator::kStrictNotEqual},
      {"<", JsBinaryOperator::kLessThan},
      {"<=", JsBinaryOperator::kLessEqual},
      {">", JsBinaryOperator::kGreaterThan},
      {">=", JsBinaryOperator::kGreaterEqual},
      {"<<", JsBinaryOperator::kLeftShift},
      {">>", JsBinaryOperator::kRightShift},
      {">>>", JsBinaryOperator::kUnsignedRightShift},
      {"+", JsBinaryOperator::kAdd},
      {"-", JsBinaryOperator::kSubtract},
      {"*", JsBinaryOperator::kMultiply},
      {"/", JsBinaryOperator::kDivide},
      {"%", JsBinaryOperator::kMod},
      {"**", JsBinaryOperator::kExp},
      {"|", JsBinaryOperator::kBitwiseOr},
      {"^", JsBinaryOperator::kBitwiseXor},
      {"&", JsBinaryOperator::kBitwiseAnd},
      {"in", JsBinaryOperator::kIn},
      {"instanceof", JsBinaryOperator::kInstanceOf},
      {"|>", JsBinaryOperator::kPipeline},
  };

  auto it = kMap->find(s);
  if (it == kMap->end()) {
    return absl::InvalidArgumentError(absl::StrCat("Invalid string for JsBinaryOperator: ", s));
  }
  return it->second;
}

absl::string_view JsAssignmentOperatorToString(JsAssignmentOperator assignment_operator) {
  switch (assignment_operator) {
    case JsAssignmentOperator::kAssign:
      return "=";
    case JsAssignmentOperator::kAddAssign:
      return "+=";
    case JsAssignmentOperator::kSubtractAssign:
      return "-=";
    case JsAssignmentOperator::kMultiplyAssign:
      return "*=";
    case JsAssignmentOperator::kDivideAssign:
      return "/=";
    case JsAssignmentOperator::kModAssign:
      return "%=";
    case JsAssignmentOperator::kExpAssign:
      return "**=";
    case JsAssignmentOperator::kLeftShiftAssign:
      return "<<=";
    case JsAssignmentOperator::kRightShiftAssign:
      return ">>=";
    case JsAssignmentOperator::kUnsignedRightShiftAssign:
      return ">>>=";
    case JsAssignmentOperator::kBitwiseOrAssign:
      return "|=";
    case JsAssignmentOperator::kBitwiseXorAssign:
      return "^=";
    case JsAssignmentOperator::kBitwiseAndAssign:
      return "&=";
    case JsAssignmentOperator::kOrAssign:
      return "||=";
    case JsAssignmentOperator::kAndAssign:
      return "&&=";
    case JsAssignmentOperator::kNullishCoalesceAssign:
      return "??=";
  }
}

absl::StatusOr<JsAssignmentOperator> StringToJsAssignmentOperator(absl::string_view s) {
  static const auto *kMap = new absl::flat_hash_map<absl::string_view, JsAssignmentOperator> {
      {"=", JsAssignmentOperator::kAssign},
      {"+=", JsAssignmentOperator::kAddAssign},
      {"-=", JsAssignmentOperator::kSubtractAssign},
      {"*=", JsAssignmentOperator::kMultiplyAssign},
      {"/=", JsAssignmentOperator::kDivideAssign},
      {"%=", JsAssignmentOperator::kModAssign},
      {"**=", JsAssignmentOperator::kExpAssign},
      {"<<=", JsAssignmentOperator::kLeftShiftAssign},
      {">>=", JsAssignmentOperator::kRightShiftAssign},
      {">>>=", JsAssignmentOperator::kUnsignedRightShiftAssign},
      {"|=", JsAssignmentOperator::kBitwiseOrAssign},
      {"^=", JsAssignmentOperator::kBitwiseXorAssign},
      {"&=", JsAssignmentOperator::kBitwiseAndAssign},
      {"||=", JsAssignmentOperator::kOrAssign},
      {"&&=", JsAssignmentOperator::kAndAssign},
      {"??=", JsAssignmentOperator::kNullishCoalesceAssign},
  };

  auto it = kMap->find(s);
  if (it == kMap->end()) {
    return absl::InvalidArgumentError(absl::StrCat("Invalid string for JsAssignmentOperator: ", s));
  }
  return it->second;
}

absl::string_view JsLogicalOperatorToString(JsLogicalOperator logical_operator) {
  switch (logical_operator) {
    case JsLogicalOperator::kOr:
      return "||";
    case JsLogicalOperator::kAnd:
      return "&&";
    case JsLogicalOperator::kNullishCoalesce:
      return "??";
  }
}

absl::StatusOr<JsLogicalOperator> StringToJsLogicalOperator(absl::string_view s) {
  static const auto *kMap = new absl::flat_hash_map<absl::string_view, JsLogicalOperator> {
      {"||", JsLogicalOperator::kOr},
      {"&&", JsLogicalOperator::kAnd},
      {"??", JsLogicalOperator::kNullishCoalesce},
  };

  auto it = kMap->find(s);
  if (it == kMap->end()) {
    return absl::InvalidArgumentError(absl::StrCat("Invalid string for JsLogicalOperator: ", s));
  }
  return it->second;
}

// =============================================================================
// JsPosition
// =============================================================================

JsPosition::JsPosition(
    int64_t line,
    int64_t column)
    : line_(std::move(line)),
      column_(std::move(column)) {}

int64_t JsPosition::line() const {
  return line_;
}

void JsPosition::set_line(int64_t line) {
  line_ = std::move(line);
}

int64_t JsPosition::column() const {
  return column_;
}

void JsPosition::set_column(int64_t column) {
  column_ = std::move(column);
}

// =============================================================================
// JsSourceLocation
// =============================================================================

JsSourceLocation::JsSourceLocation(
    std::unique_ptr<JsPosition> start,
    std::unique_ptr<JsPosition> end,
    std::optional<std::string> identifier_name)
    : start_(std::move(start)),
      end_(std::move(end)),
      identifier_name_(std::move(identifier_name)) {}

JsPosition* JsSourceLocation::start() {
  return start_.get();
}

const JsPosition* JsSourceLocation::start() const {
  return start_.get();
}

void JsSourceLocation::set_start(std::unique_ptr<JsPosition> start) {
  start_ = std::move(start);
}

JsPosition* JsSourceLocation::end() {
  return end_.get();
}

const JsPosition* JsSourceLocation::end() const {
  return end_.get();
}

void JsSourceLocation::set_end(std::unique_ptr<JsPosition> end) {
  end_ = std::move(end);
}

std::optional<absl::string_view> JsSourceLocation::identifier_name() const {
  if (!identifier_name_.has_value()) {
    return std::nullopt;
  } else {
    return identifier_name_.value();
  }
}

void JsSourceLocation::set_identifier_name(std::optional<std::string> identifier_name) {
  identifier_name_ = std::move(identifier_name);
}

// =============================================================================
// JsComment
// =============================================================================

absl::string_view JsCommentTypeToString(JsCommentType comment_type) {
  switch (comment_type) {
    case JsCommentType::kCommentBlock:
      return "CommentBlock";
    case JsCommentType::kCommentLine:
      return "CommentLine";
  }
}

absl::StatusOr<JsCommentType> StringToJsCommentType(absl::string_view s) {
  static const auto *kMap = new absl::flat_hash_map<absl::string_view, JsCommentType> {
      {"CommentBlock", JsCommentType::kCommentBlock},
      {"CommentLine", JsCommentType::kCommentLine},
  };

  auto it = kMap->find(s);
  if (it == kMap->end()) {
    return absl::InvalidArgumentError(absl::StrCat("Invalid string for JsCommentType: ", s));
  }
  return it->second;
}

JsComment::JsComment(
    std::unique_ptr<JsSourceLocation> loc,
    std::string value,
    int64_t start,
    int64_t end)
    : loc_(std::move(loc)),
      value_(std::move(value)),
      start_(std::move(start)),
      end_(std::move(end)) {}

JsSourceLocation* JsComment::loc() {
  return loc_.get();
}

const JsSourceLocation* JsComment::loc() const {
  return loc_.get();
}

void JsComment::set_loc(std::unique_ptr<JsSourceLocation> loc) {
  loc_ = std::move(loc);
}

absl::string_view JsComment::value() const {
  return value_;
}

void JsComment::set_value(std::string value) {
  value_ = std::move(value);
}

int64_t JsComment::start() const {
  return start_;
}

void JsComment::set_start(int64_t start) {
  start_ = std::move(start);
}

int64_t JsComment::end() const {
  return end_;
}

void JsComment::set_end(int64_t end) {
  end_ = std::move(end);
}

// =============================================================================
// JsCommentBlock
// =============================================================================

JsCommentBlock::JsCommentBlock(
    std::unique_ptr<JsSourceLocation> loc,
    std::string value,
    int64_t start,
    int64_t end)
    : JsComment(std::move(loc), std::move(value), std::move(start), std::move(end)) {}

// =============================================================================
// JsCommentLine
// =============================================================================

JsCommentLine::JsCommentLine(
    std::unique_ptr<JsSourceLocation> loc,
    std::string value,
    int64_t start,
    int64_t end)
    : JsComment(std::move(loc), std::move(value), std::move(start), std::move(end)) {}

// =============================================================================
// JsSymbolId
// =============================================================================

JsSymbolId::JsSymbolId(
    std::string name,
    std::optional<int64_t> def_scope_uid)
    : name_(std::move(name)),
      def_scope_uid_(std::move(def_scope_uid)) {}

absl::string_view JsSymbolId::name() const {
  return name_;
}

void JsSymbolId::set_name(std::string name) {
  name_ = std::move(name);
}

std::optional<int64_t> JsSymbolId::def_scope_uid() const {
  if (!def_scope_uid_.has_value()) {
    return std::nullopt;
  } else {
    return def_scope_uid_.value();
  }
}

void JsSymbolId::set_def_scope_uid(std::optional<int64_t> def_scope_uid) {
  def_scope_uid_ = std::move(def_scope_uid);
}

// =============================================================================
// JsNode
// =============================================================================

absl::string_view JsNodeTypeToString(JsNodeType node_type) {
  switch (node_type) {
    case JsNodeType::kFile:
      return "File";
    case JsNodeType::kPrivateName:
      return "PrivateName";
    case JsNodeType::kProgram:
      return "Program";
    case JsNodeType::kFunctionDeclaration:
      return "FunctionDeclaration";
    case JsNodeType::kObjectMethod:
      return "ObjectMethod";
    case JsNodeType::kFunctionExpression:
      return "FunctionExpression";
    case JsNodeType::kClassMethod:
      return "ClassMethod";
    case JsNodeType::kClassPrivateMethod:
      return "ClassPrivateMethod";
    case JsNodeType::kArrowFunctionExpression:
      return "ArrowFunctionExpression";
    case JsNodeType::kExpressionStatement:
      return "ExpressionStatement";
    case JsNodeType::kBlockStatement:
      return "BlockStatement";
    case JsNodeType::kEmptyStatement:
      return "EmptyStatement";
    case JsNodeType::kDebuggerStatement:
      return "DebuggerStatement";
    case JsNodeType::kWithStatement:
      return "WithStatement";
    case JsNodeType::kReturnStatement:
      return "ReturnStatement";
    case JsNodeType::kLabeledStatement:
      return "LabeledStatement";
    case JsNodeType::kBreakStatement:
      return "BreakStatement";
    case JsNodeType::kContinueStatement:
      return "ContinueStatement";
    case JsNodeType::kIfStatement:
      return "IfStatement";
    case JsNodeType::kSwitchStatement:
      return "SwitchStatement";
    case JsNodeType::kThrowStatement:
      return "ThrowStatement";
    case JsNodeType::kTryStatement:
      return "TryStatement";
    case JsNodeType::kWhileStatement:
      return "WhileStatement";
    case JsNodeType::kDoWhileStatement:
      return "DoWhileStatement";
    case JsNodeType::kForStatement:
      return "ForStatement";
    case JsNodeType::kForInStatement:
      return "ForInStatement";
    case JsNodeType::kForOfStatement:
      return "ForOfStatement";
    case JsNodeType::kVariableDeclaration:
      return "VariableDeclaration";
    case JsNodeType::kClassDeclaration:
      return "ClassDeclaration";
    case JsNodeType::kSwitchCase:
      return "SwitchCase";
    case JsNodeType::kCatchClause:
      return "CatchClause";
    case JsNodeType::kVariableDeclarator:
      return "VariableDeclarator";
    case JsNodeType::kDirective:
      return "Directive";
    case JsNodeType::kDirectiveLiteral:
      return "DirectiveLiteral";
    case JsNodeType::kInterpreterDirective:
      return "InterpreterDirective";
    case JsNodeType::kIdentifier:
      return "Identifier";
    case JsNodeType::kRegExpLiteral:
      return "RegExpLiteral";
    case JsNodeType::kNullLiteral:
      return "NullLiteral";
    case JsNodeType::kStringLiteral:
      return "StringLiteral";
    case JsNodeType::kBooleanLiteral:
      return "BooleanLiteral";
    case JsNodeType::kNumericLiteral:
      return "NumericLiteral";
    case JsNodeType::kBigIntLiteral:
      return "BigIntLiteral";
    case JsNodeType::kThisExpression:
      return "ThisExpression";
    case JsNodeType::kYieldExpression:
      return "YieldExpression";
    case JsNodeType::kAwaitExpression:
      return "AwaitExpression";
    case JsNodeType::kArrayExpression:
      return "ArrayExpression";
    case JsNodeType::kObjectExpression:
      return "ObjectExpression";
    case JsNodeType::kUnaryExpression:
      return "UnaryExpression";
    case JsNodeType::kUpdateExpression:
      return "UpdateExpression";
    case JsNodeType::kBinaryExpression:
      return "BinaryExpression";
    case JsNodeType::kAssignmentExpression:
      return "AssignmentExpression";
    case JsNodeType::kLogicalExpression:
      return "LogicalExpression";
    case JsNodeType::kMemberExpression:
      return "MemberExpression";
    case JsNodeType::kOptionalMemberExpression:
      return "OptionalMemberExpression";
    case JsNodeType::kConditionalExpression:
      return "ConditionalExpression";
    case JsNodeType::kCallExpression:
      return "CallExpression";
    case JsNodeType::kOptionalCallExpression:
      return "OptionalCallExpression";
    case JsNodeType::kNewExpression:
      return "NewExpression";
    case JsNodeType::kSequenceExpression:
      return "SequenceExpression";
    case JsNodeType::kParenthesizedExpression:
      return "ParenthesizedExpression";
    case JsNodeType::kTemplateLiteral:
      return "TemplateLiteral";
    case JsNodeType::kTaggedTemplateExpression:
      return "TaggedTemplateExpression";
    case JsNodeType::kClassExpression:
      return "ClassExpression";
    case JsNodeType::kMetaProperty:
      return "MetaProperty";
    case JsNodeType::kObjectPattern:
      return "ObjectPattern";
    case JsNodeType::kArrayPattern:
      return "ArrayPattern";
    case JsNodeType::kRestElement:
      return "RestElement";
    case JsNodeType::kAssignmentPattern:
      return "AssignmentPattern";
    case JsNodeType::kSuper:
      return "Super";
    case JsNodeType::kImport:
      return "Import";
    case JsNodeType::kObjectProperty:
      return "ObjectProperty";
    case JsNodeType::kSpreadElement:
      return "SpreadElement";
    case JsNodeType::kTemplateElement:
      return "TemplateElement";
    case JsNodeType::kClassBody:
      return "ClassBody";
    case JsNodeType::kClassProperty:
      return "ClassProperty";
    case JsNodeType::kClassPrivateProperty:
      return "ClassPrivateProperty";
    case JsNodeType::kImportDeclaration:
      return "ImportDeclaration";
    case JsNodeType::kExportNamedDeclaration:
      return "ExportNamedDeclaration";
    case JsNodeType::kExportDefaultDeclaration:
      return "ExportDefaultDeclaration";
    case JsNodeType::kExportAllDeclaration:
      return "ExportAllDeclaration";
    case JsNodeType::kImportSpecifier:
      return "ImportSpecifier";
    case JsNodeType::kImportDefaultSpecifier:
      return "ImportDefaultSpecifier";
    case JsNodeType::kImportNamespaceSpecifier:
      return "ImportNamespaceSpecifier";
    case JsNodeType::kExportSpecifier:
      return "ExportSpecifier";
    case JsNodeType::kImportAttribute:
      return "ImportAttribute";
  }
}

absl::StatusOr<JsNodeType> StringToJsNodeType(absl::string_view s) {
  static const auto *kMap = new absl::flat_hash_map<absl::string_view, JsNodeType> {
      {"File", JsNodeType::kFile},
      {"PrivateName", JsNodeType::kPrivateName},
      {"Program", JsNodeType::kProgram},
      {"FunctionDeclaration", JsNodeType::kFunctionDeclaration},
      {"ObjectMethod", JsNodeType::kObjectMethod},
      {"FunctionExpression", JsNodeType::kFunctionExpression},
      {"ClassMethod", JsNodeType::kClassMethod},
      {"ClassPrivateMethod", JsNodeType::kClassPrivateMethod},
      {"ArrowFunctionExpression", JsNodeType::kArrowFunctionExpression},
      {"ExpressionStatement", JsNodeType::kExpressionStatement},
      {"BlockStatement", JsNodeType::kBlockStatement},
      {"EmptyStatement", JsNodeType::kEmptyStatement},
      {"DebuggerStatement", JsNodeType::kDebuggerStatement},
      {"WithStatement", JsNodeType::kWithStatement},
      {"ReturnStatement", JsNodeType::kReturnStatement},
      {"LabeledStatement", JsNodeType::kLabeledStatement},
      {"BreakStatement", JsNodeType::kBreakStatement},
      {"ContinueStatement", JsNodeType::kContinueStatement},
      {"IfStatement", JsNodeType::kIfStatement},
      {"SwitchStatement", JsNodeType::kSwitchStatement},
      {"ThrowStatement", JsNodeType::kThrowStatement},
      {"TryStatement", JsNodeType::kTryStatement},
      {"WhileStatement", JsNodeType::kWhileStatement},
      {"DoWhileStatement", JsNodeType::kDoWhileStatement},
      {"ForStatement", JsNodeType::kForStatement},
      {"ForInStatement", JsNodeType::kForInStatement},
      {"ForOfStatement", JsNodeType::kForOfStatement},
      {"VariableDeclaration", JsNodeType::kVariableDeclaration},
      {"ClassDeclaration", JsNodeType::kClassDeclaration},
      {"SwitchCase", JsNodeType::kSwitchCase},
      {"CatchClause", JsNodeType::kCatchClause},
      {"VariableDeclarator", JsNodeType::kVariableDeclarator},
      {"Directive", JsNodeType::kDirective},
      {"DirectiveLiteral", JsNodeType::kDirectiveLiteral},
      {"InterpreterDirective", JsNodeType::kInterpreterDirective},
      {"Identifier", JsNodeType::kIdentifier},
      {"RegExpLiteral", JsNodeType::kRegExpLiteral},
      {"NullLiteral", JsNodeType::kNullLiteral},
      {"StringLiteral", JsNodeType::kStringLiteral},
      {"BooleanLiteral", JsNodeType::kBooleanLiteral},
      {"NumericLiteral", JsNodeType::kNumericLiteral},
      {"BigIntLiteral", JsNodeType::kBigIntLiteral},
      {"ThisExpression", JsNodeType::kThisExpression},
      {"YieldExpression", JsNodeType::kYieldExpression},
      {"AwaitExpression", JsNodeType::kAwaitExpression},
      {"ArrayExpression", JsNodeType::kArrayExpression},
      {"ObjectExpression", JsNodeType::kObjectExpression},
      {"UnaryExpression", JsNodeType::kUnaryExpression},
      {"UpdateExpression", JsNodeType::kUpdateExpression},
      {"BinaryExpression", JsNodeType::kBinaryExpression},
      {"AssignmentExpression", JsNodeType::kAssignmentExpression},
      {"LogicalExpression", JsNodeType::kLogicalExpression},
      {"MemberExpression", JsNodeType::kMemberExpression},
      {"OptionalMemberExpression", JsNodeType::kOptionalMemberExpression},
      {"ConditionalExpression", JsNodeType::kConditionalExpression},
      {"CallExpression", JsNodeType::kCallExpression},
      {"OptionalCallExpression", JsNodeType::kOptionalCallExpression},
      {"NewExpression", JsNodeType::kNewExpression},
      {"SequenceExpression", JsNodeType::kSequenceExpression},
      {"ParenthesizedExpression", JsNodeType::kParenthesizedExpression},
      {"TemplateLiteral", JsNodeType::kTemplateLiteral},
      {"TaggedTemplateExpression", JsNodeType::kTaggedTemplateExpression},
      {"ClassExpression", JsNodeType::kClassExpression},
      {"MetaProperty", JsNodeType::kMetaProperty},
      {"ObjectPattern", JsNodeType::kObjectPattern},
      {"ArrayPattern", JsNodeType::kArrayPattern},
      {"RestElement", JsNodeType::kRestElement},
      {"AssignmentPattern", JsNodeType::kAssignmentPattern},
      {"Super", JsNodeType::kSuper},
      {"Import", JsNodeType::kImport},
      {"ObjectProperty", JsNodeType::kObjectProperty},
      {"SpreadElement", JsNodeType::kSpreadElement},
      {"TemplateElement", JsNodeType::kTemplateElement},
      {"ClassBody", JsNodeType::kClassBody},
      {"ClassProperty", JsNodeType::kClassProperty},
      {"ClassPrivateProperty", JsNodeType::kClassPrivateProperty},
      {"ImportDeclaration", JsNodeType::kImportDeclaration},
      {"ExportNamedDeclaration", JsNodeType::kExportNamedDeclaration},
      {"ExportDefaultDeclaration", JsNodeType::kExportDefaultDeclaration},
      {"ExportAllDeclaration", JsNodeType::kExportAllDeclaration},
      {"ImportSpecifier", JsNodeType::kImportSpecifier},
      {"ImportDefaultSpecifier", JsNodeType::kImportDefaultSpecifier},
      {"ImportNamespaceSpecifier", JsNodeType::kImportNamespaceSpecifier},
      {"ExportSpecifier", JsNodeType::kExportSpecifier},
      {"ImportAttribute", JsNodeType::kImportAttribute},
  };

  auto it = kMap->find(s);
  if (it == kMap->end()) {
    return absl::InvalidArgumentError(absl::StrCat("Invalid string for JsNodeType: ", s));
  }
  return it->second;
}

JsNode::JsNode(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols)
    : loc_(std::move(loc)),
      start_(std::move(start)),
      end_(std::move(end)),
      leading_comments_(std::move(leading_comments)),
      trailing_comments_(std::move(trailing_comments)),
      inner_comments_(std::move(inner_comments)),
      scope_uid_(std::move(scope_uid)),
      referenced_symbol_(std::move(referenced_symbol)),
      defined_symbols_(std::move(defined_symbols)) {}

std::optional<JsSourceLocation*> JsNode::loc() {
  if (!loc_.has_value()) {
    return std::nullopt;
  } else {
    return loc_.value().get();
  }
}

std::optional<const JsSourceLocation*> JsNode::loc() const {
  if (!loc_.has_value()) {
    return std::nullopt;
  } else {
    return loc_.value().get();
  }
}

void JsNode::set_loc(std::optional<std::unique_ptr<JsSourceLocation>> loc) {
  loc_ = std::move(loc);
}

std::optional<int64_t> JsNode::start() const {
  if (!start_.has_value()) {
    return std::nullopt;
  } else {
    return start_.value();
  }
}

void JsNode::set_start(std::optional<int64_t> start) {
  start_ = std::move(start);
}

std::optional<int64_t> JsNode::end() const {
  if (!end_.has_value()) {
    return std::nullopt;
  } else {
    return end_.value();
  }
}

void JsNode::set_end(std::optional<int64_t> end) {
  end_ = std::move(end);
}

std::optional<std::vector<std::unique_ptr<JsComment>>*> JsNode::leading_comments() {
  if (!leading_comments_.has_value()) {
    return std::nullopt;
  } else {
    return &leading_comments_.value();
  }
}

std::optional<const std::vector<std::unique_ptr<JsComment>>*> JsNode::leading_comments() const {
  if (!leading_comments_.has_value()) {
    return std::nullopt;
  } else {
    return &leading_comments_.value();
  }
}

void JsNode::set_leading_comments(std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments) {
  leading_comments_ = std::move(leading_comments);
}

std::optional<std::vector<std::unique_ptr<JsComment>>*> JsNode::trailing_comments() {
  if (!trailing_comments_.has_value()) {
    return std::nullopt;
  } else {
    return &trailing_comments_.value();
  }
}

std::optional<const std::vector<std::unique_ptr<JsComment>>*> JsNode::trailing_comments() const {
  if (!trailing_comments_.has_value()) {
    return std::nullopt;
  } else {
    return &trailing_comments_.value();
  }
}

void JsNode::set_trailing_comments(std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments) {
  trailing_comments_ = std::move(trailing_comments);
}

std::optional<std::vector<std::unique_ptr<JsComment>>*> JsNode::inner_comments() {
  if (!inner_comments_.has_value()) {
    return std::nullopt;
  } else {
    return &inner_comments_.value();
  }
}

std::optional<const std::vector<std::unique_ptr<JsComment>>*> JsNode::inner_comments() const {
  if (!inner_comments_.has_value()) {
    return std::nullopt;
  } else {
    return &inner_comments_.value();
  }
}

void JsNode::set_inner_comments(std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments) {
  inner_comments_ = std::move(inner_comments);
}

std::optional<int64_t> JsNode::scope_uid() const {
  if (!scope_uid_.has_value()) {
    return std::nullopt;
  } else {
    return scope_uid_.value();
  }
}

void JsNode::set_scope_uid(std::optional<int64_t> scope_uid) {
  scope_uid_ = std::move(scope_uid);
}

std::optional<JsSymbolId*> JsNode::referenced_symbol() {
  if (!referenced_symbol_.has_value()) {
    return std::nullopt;
  } else {
    return referenced_symbol_.value().get();
  }
}

std::optional<const JsSymbolId*> JsNode::referenced_symbol() const {
  if (!referenced_symbol_.has_value()) {
    return std::nullopt;
  } else {
    return referenced_symbol_.value().get();
  }
}

void JsNode::set_referenced_symbol(std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol) {
  referenced_symbol_ = std::move(referenced_symbol);
}

std::optional<std::vector<std::unique_ptr<JsSymbolId>>*> JsNode::defined_symbols() {
  if (!defined_symbols_.has_value()) {
    return std::nullopt;
  } else {
    return &defined_symbols_.value();
  }
}

std::optional<const std::vector<std::unique_ptr<JsSymbolId>>*> JsNode::defined_symbols() const {
  if (!defined_symbols_.has_value()) {
    return std::nullopt;
  } else {
    return &defined_symbols_.value();
  }
}

void JsNode::set_defined_symbols(std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols) {
  defined_symbols_ = std::move(defined_symbols);
}

// =============================================================================
// JsInterpreterDirective
// =============================================================================

JsInterpreterDirective::JsInterpreterDirective(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::string value)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      value_(std::move(value)) {}

absl::string_view JsInterpreterDirective::value() const {
  return value_;
}

void JsInterpreterDirective::set_value(std::string value) {
  value_ = std::move(value);
}

// =============================================================================
// JsStatement
// =============================================================================

JsStatement::JsStatement(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)) {}

// =============================================================================
// JsModuleDeclaration
// =============================================================================

JsModuleDeclaration::JsModuleDeclaration(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)) {}

// =============================================================================
// JsDirectiveLiteralExtra
// =============================================================================

JsDirectiveLiteralExtra::JsDirectiveLiteralExtra(
    std::string raw,
    std::string raw_value)
    : raw_(std::move(raw)),
      raw_value_(std::move(raw_value)) {}

absl::string_view JsDirectiveLiteralExtra::raw() const {
  return raw_;
}

void JsDirectiveLiteralExtra::set_raw(std::string raw) {
  raw_ = std::move(raw);
}

absl::string_view JsDirectiveLiteralExtra::raw_value() const {
  return raw_value_;
}

void JsDirectiveLiteralExtra::set_raw_value(std::string raw_value) {
  raw_value_ = std::move(raw_value);
}

// =============================================================================
// JsDirectiveLiteral
// =============================================================================

JsDirectiveLiteral::JsDirectiveLiteral(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::string value,
    std::optional<std::unique_ptr<JsDirectiveLiteralExtra>> extra)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      value_(std::move(value)),
      extra_(std::move(extra)) {}

absl::string_view JsDirectiveLiteral::value() const {
  return value_;
}

void JsDirectiveLiteral::set_value(std::string value) {
  value_ = std::move(value);
}

std::optional<JsDirectiveLiteralExtra*> JsDirectiveLiteral::extra() {
  if (!extra_.has_value()) {
    return std::nullopt;
  } else {
    return extra_.value().get();
  }
}

std::optional<const JsDirectiveLiteralExtra*> JsDirectiveLiteral::extra() const {
  if (!extra_.has_value()) {
    return std::nullopt;
  } else {
    return extra_.value().get();
  }
}

void JsDirectiveLiteral::set_extra(std::optional<std::unique_ptr<JsDirectiveLiteralExtra>> extra) {
  extra_ = std::move(extra);
}

// =============================================================================
// JsDirective
// =============================================================================

JsDirective::JsDirective(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::unique_ptr<JsDirectiveLiteral> value)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      value_(std::move(value)) {}

JsDirectiveLiteral* JsDirective::value() {
  return value_.get();
}

const JsDirectiveLiteral* JsDirective::value() const {
  return value_.get();
}

void JsDirective::set_value(std::unique_ptr<JsDirectiveLiteral> value) {
  value_ = std::move(value);
}

// =============================================================================
// JsProgram
// =============================================================================

JsProgram::JsProgram(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::optional<std::unique_ptr<JsInterpreterDirective>> interpreter,
    std::string source_type,
    std::vector<std::variant<std::unique_ptr<JsStatement>, std::unique_ptr<JsModuleDeclaration>>> body,
    std::vector<std::unique_ptr<JsDirective>> directives)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      interpreter_(std::move(interpreter)),
      source_type_(std::move(source_type)),
      body_(std::move(body)),
      directives_(std::move(directives)) {}

std::optional<JsInterpreterDirective*> JsProgram::interpreter() {
  if (!interpreter_.has_value()) {
    return std::nullopt;
  } else {
    return interpreter_.value().get();
  }
}

std::optional<const JsInterpreterDirective*> JsProgram::interpreter() const {
  if (!interpreter_.has_value()) {
    return std::nullopt;
  } else {
    return interpreter_.value().get();
  }
}

void JsProgram::set_interpreter(std::optional<std::unique_ptr<JsInterpreterDirective>> interpreter) {
  interpreter_ = std::move(interpreter);
}

absl::string_view JsProgram::source_type() const {
  return source_type_;
}

void JsProgram::set_source_type(std::string source_type) {
  source_type_ = std::move(source_type);
}

std::vector<std::variant<std::unique_ptr<JsStatement>, std::unique_ptr<JsModuleDeclaration>>>* JsProgram::body() {
  return &body_;
}

const std::vector<std::variant<std::unique_ptr<JsStatement>, std::unique_ptr<JsModuleDeclaration>>>* JsProgram::body() const {
  return &body_;
}

void JsProgram::set_body(std::vector<std::variant<std::unique_ptr<JsStatement>, std::unique_ptr<JsModuleDeclaration>>> body) {
  body_ = std::move(body);
}

std::vector<std::unique_ptr<JsDirective>>* JsProgram::directives() {
  return &directives_;
}

const std::vector<std::unique_ptr<JsDirective>>* JsProgram::directives() const {
  return &directives_;
}

void JsProgram::set_directives(std::vector<std::unique_ptr<JsDirective>> directives) {
  directives_ = std::move(directives);
}

// =============================================================================
// JsFile
// =============================================================================

JsFile::JsFile(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::unique_ptr<JsProgram> program)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      program_(std::move(program)) {}

JsProgram* JsFile::program() {
  return program_.get();
}

const JsProgram* JsFile::program() const {
  return program_.get();
}

void JsFile::set_program(std::unique_ptr<JsProgram> program) {
  program_ = std::move(program);
}

// =============================================================================
// JsExpression
// =============================================================================

JsExpression::JsExpression(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)) {}

// =============================================================================
// JsPattern
// =============================================================================

JsPattern::JsPattern(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)) {}

// =============================================================================
// JsLVal
// =============================================================================

JsLVal::JsLVal(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)) {}

// =============================================================================
// JsIdentifier
// =============================================================================

JsIdentifier::JsIdentifier(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::string name)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsExpression(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsPattern(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsLVal(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      name_(std::move(name)) {}

absl::string_view JsIdentifier::name() const {
  return name_;
}

void JsIdentifier::set_name(std::string name) {
  name_ = std::move(name);
}

// =============================================================================
// JsPrivateName
// =============================================================================

JsPrivateName::JsPrivateName(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::unique_ptr<JsIdentifier> id)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      id_(std::move(id)) {}

JsIdentifier* JsPrivateName::id() {
  return id_.get();
}

const JsIdentifier* JsPrivateName::id() const {
  return id_.get();
}

void JsPrivateName::set_id(std::unique_ptr<JsIdentifier> id) {
  id_ = std::move(id);
}

// =============================================================================
// JsLiteral
// =============================================================================

JsLiteral::JsLiteral(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsExpression(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)) {}

// =============================================================================
// JsRegExpLiteralExtra
// =============================================================================

JsRegExpLiteralExtra::JsRegExpLiteralExtra(
    std::string raw)
    : raw_(std::move(raw)) {}

absl::string_view JsRegExpLiteralExtra::raw() const {
  return raw_;
}

void JsRegExpLiteralExtra::set_raw(std::string raw) {
  raw_ = std::move(raw);
}

// =============================================================================
// JsRegExpLiteral
// =============================================================================

JsRegExpLiteral::JsRegExpLiteral(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::string pattern,
    std::string flags,
    std::optional<std::unique_ptr<JsRegExpLiteralExtra>> extra)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsExpression(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsLiteral(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      pattern_(std::move(pattern)),
      flags_(std::move(flags)),
      extra_(std::move(extra)) {}

absl::string_view JsRegExpLiteral::pattern() const {
  return pattern_;
}

void JsRegExpLiteral::set_pattern(std::string pattern) {
  pattern_ = std::move(pattern);
}

absl::string_view JsRegExpLiteral::flags() const {
  return flags_;
}

void JsRegExpLiteral::set_flags(std::string flags) {
  flags_ = std::move(flags);
}

std::optional<JsRegExpLiteralExtra*> JsRegExpLiteral::extra() {
  if (!extra_.has_value()) {
    return std::nullopt;
  } else {
    return extra_.value().get();
  }
}

std::optional<const JsRegExpLiteralExtra*> JsRegExpLiteral::extra() const {
  if (!extra_.has_value()) {
    return std::nullopt;
  } else {
    return extra_.value().get();
  }
}

void JsRegExpLiteral::set_extra(std::optional<std::unique_ptr<JsRegExpLiteralExtra>> extra) {
  extra_ = std::move(extra);
}

// =============================================================================
// JsNullLiteral
// =============================================================================

JsNullLiteral::JsNullLiteral(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsExpression(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsLiteral(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)) {}

// =============================================================================
// JsStringLiteralExtra
// =============================================================================

JsStringLiteralExtra::JsStringLiteralExtra(
    std::string raw,
    std::string raw_value)
    : raw_(std::move(raw)),
      raw_value_(std::move(raw_value)) {}

absl::string_view JsStringLiteralExtra::raw() const {
  return raw_;
}

void JsStringLiteralExtra::set_raw(std::string raw) {
  raw_ = std::move(raw);
}

absl::string_view JsStringLiteralExtra::raw_value() const {
  return raw_value_;
}

void JsStringLiteralExtra::set_raw_value(std::string raw_value) {
  raw_value_ = std::move(raw_value);
}

// =============================================================================
// JsStringLiteral
// =============================================================================

JsStringLiteral::JsStringLiteral(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::string value,
    std::optional<std::unique_ptr<JsStringLiteralExtra>> extra)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsExpression(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsLiteral(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      value_(std::move(value)),
      extra_(std::move(extra)) {}

absl::string_view JsStringLiteral::value() const {
  return value_;
}

void JsStringLiteral::set_value(std::string value) {
  value_ = std::move(value);
}

std::optional<JsStringLiteralExtra*> JsStringLiteral::extra() {
  if (!extra_.has_value()) {
    return std::nullopt;
  } else {
    return extra_.value().get();
  }
}

std::optional<const JsStringLiteralExtra*> JsStringLiteral::extra() const {
  if (!extra_.has_value()) {
    return std::nullopt;
  } else {
    return extra_.value().get();
  }
}

void JsStringLiteral::set_extra(std::optional<std::unique_ptr<JsStringLiteralExtra>> extra) {
  extra_ = std::move(extra);
}

// =============================================================================
// JsBooleanLiteral
// =============================================================================

JsBooleanLiteral::JsBooleanLiteral(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    bool value)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsExpression(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsLiteral(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      value_(std::move(value)) {}

bool JsBooleanLiteral::value() const {
  return value_;
}

void JsBooleanLiteral::set_value(bool value) {
  value_ = value;
}

// =============================================================================
// JsNumericLiteralExtra
// =============================================================================

JsNumericLiteralExtra::JsNumericLiteralExtra(
    std::string raw,
    double raw_value)
    : raw_(std::move(raw)),
      raw_value_(std::move(raw_value)) {}

absl::string_view JsNumericLiteralExtra::raw() const {
  return raw_;
}

void JsNumericLiteralExtra::set_raw(std::string raw) {
  raw_ = std::move(raw);
}

double JsNumericLiteralExtra::raw_value() const {
  return raw_value_;
}

void JsNumericLiteralExtra::set_raw_value(double raw_value) {
  raw_value_ = raw_value;
}

// =============================================================================
// JsNumericLiteral
// =============================================================================

JsNumericLiteral::JsNumericLiteral(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    double value,
    std::optional<std::unique_ptr<JsNumericLiteralExtra>> extra)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsExpression(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsLiteral(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      value_(std::move(value)),
      extra_(std::move(extra)) {}

double JsNumericLiteral::value() const {
  return value_;
}

void JsNumericLiteral::set_value(double value) {
  value_ = value;
}

std::optional<JsNumericLiteralExtra*> JsNumericLiteral::extra() {
  if (!extra_.has_value()) {
    return std::nullopt;
  } else {
    return extra_.value().get();
  }
}

std::optional<const JsNumericLiteralExtra*> JsNumericLiteral::extra() const {
  if (!extra_.has_value()) {
    return std::nullopt;
  } else {
    return extra_.value().get();
  }
}

void JsNumericLiteral::set_extra(std::optional<std::unique_ptr<JsNumericLiteralExtra>> extra) {
  extra_ = std::move(extra);
}

// =============================================================================
// JsBigIntLiteralExtra
// =============================================================================

JsBigIntLiteralExtra::JsBigIntLiteralExtra(
    std::string raw,
    std::string raw_value)
    : raw_(std::move(raw)),
      raw_value_(std::move(raw_value)) {}

absl::string_view JsBigIntLiteralExtra::raw() const {
  return raw_;
}

void JsBigIntLiteralExtra::set_raw(std::string raw) {
  raw_ = std::move(raw);
}

absl::string_view JsBigIntLiteralExtra::raw_value() const {
  return raw_value_;
}

void JsBigIntLiteralExtra::set_raw_value(std::string raw_value) {
  raw_value_ = std::move(raw_value);
}

// =============================================================================
// JsBigIntLiteral
// =============================================================================

JsBigIntLiteral::JsBigIntLiteral(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::string value,
    std::optional<std::unique_ptr<JsBigIntLiteralExtra>> extra)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsExpression(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsLiteral(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      value_(std::move(value)),
      extra_(std::move(extra)) {}

absl::string_view JsBigIntLiteral::value() const {
  return value_;
}

void JsBigIntLiteral::set_value(std::string value) {
  value_ = std::move(value);
}

std::optional<JsBigIntLiteralExtra*> JsBigIntLiteral::extra() {
  if (!extra_.has_value()) {
    return std::nullopt;
  } else {
    return extra_.value().get();
  }
}

std::optional<const JsBigIntLiteralExtra*> JsBigIntLiteral::extra() const {
  if (!extra_.has_value()) {
    return std::nullopt;
  } else {
    return extra_.value().get();
  }
}

void JsBigIntLiteral::set_extra(std::optional<std::unique_ptr<JsBigIntLiteralExtra>> extra) {
  extra_ = std::move(extra);
}

// =============================================================================
// JsFunction
// =============================================================================

JsFunction::JsFunction(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::optional<std::unique_ptr<JsIdentifier>> id,
    std::vector<std::unique_ptr<JsPattern>> params,
    bool generator,
    bool async)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      id_(std::move(id)),
      params_(std::move(params)),
      generator_(std::move(generator)),
      async_(std::move(async)) {}

std::optional<JsIdentifier*> JsFunction::id() {
  if (!id_.has_value()) {
    return std::nullopt;
  } else {
    return id_.value().get();
  }
}

std::optional<const JsIdentifier*> JsFunction::id() const {
  if (!id_.has_value()) {
    return std::nullopt;
  } else {
    return id_.value().get();
  }
}

void JsFunction::set_id(std::optional<std::unique_ptr<JsIdentifier>> id) {
  id_ = std::move(id);
}

std::vector<std::unique_ptr<JsPattern>>* JsFunction::params() {
  return &params_;
}

const std::vector<std::unique_ptr<JsPattern>>* JsFunction::params() const {
  return &params_;
}

void JsFunction::set_params(std::vector<std::unique_ptr<JsPattern>> params) {
  params_ = std::move(params);
}

bool JsFunction::generator() const {
  return generator_;
}

void JsFunction::set_generator(bool generator) {
  generator_ = generator;
}

bool JsFunction::async() const {
  return async_;
}

void JsFunction::set_async(bool async) {
  async_ = async;
}

// =============================================================================
// JsBlockStatement
// =============================================================================

JsBlockStatement::JsBlockStatement(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::vector<std::unique_ptr<JsStatement>> body,
    std::vector<std::unique_ptr<JsDirective>> directives)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsStatement(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      body_(std::move(body)),
      directives_(std::move(directives)) {}

std::vector<std::unique_ptr<JsStatement>>* JsBlockStatement::body() {
  return &body_;
}

const std::vector<std::unique_ptr<JsStatement>>* JsBlockStatement::body() const {
  return &body_;
}

void JsBlockStatement::set_body(std::vector<std::unique_ptr<JsStatement>> body) {
  body_ = std::move(body);
}

std::vector<std::unique_ptr<JsDirective>>* JsBlockStatement::directives() {
  return &directives_;
}

const std::vector<std::unique_ptr<JsDirective>>* JsBlockStatement::directives() const {
  return &directives_;
}

void JsBlockStatement::set_directives(std::vector<std::unique_ptr<JsDirective>> directives) {
  directives_ = std::move(directives);
}

// =============================================================================
// JsBlockStatementFunction
// =============================================================================

JsBlockStatementFunction::JsBlockStatementFunction(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::optional<std::unique_ptr<JsIdentifier>> id,
    std::vector<std::unique_ptr<JsPattern>> params,
    bool generator,
    bool async,
    std::unique_ptr<JsBlockStatement> body)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsFunction(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols), std::move(id), std::move(params), std::move(generator), std::move(async)),
      body_(std::move(body)) {}

JsBlockStatement* JsBlockStatementFunction::body() {
  return body_.get();
}

const JsBlockStatement* JsBlockStatementFunction::body() const {
  return body_.get();
}

void JsBlockStatementFunction::set_body(std::unique_ptr<JsBlockStatement> body) {
  body_ = std::move(body);
}

// =============================================================================
// JsExpressionStatement
// =============================================================================

JsExpressionStatement::JsExpressionStatement(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::unique_ptr<JsExpression> expression)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsStatement(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      expression_(std::move(expression)) {}

JsExpression* JsExpressionStatement::expression() {
  return expression_.get();
}

const JsExpression* JsExpressionStatement::expression() const {
  return expression_.get();
}

void JsExpressionStatement::set_expression(std::unique_ptr<JsExpression> expression) {
  expression_ = std::move(expression);
}

// =============================================================================
// JsEmptyStatement
// =============================================================================

JsEmptyStatement::JsEmptyStatement(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsStatement(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)) {}

// =============================================================================
// JsDebuggerStatement
// =============================================================================

JsDebuggerStatement::JsDebuggerStatement(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsStatement(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)) {}

// =============================================================================
// JsWithStatement
// =============================================================================

JsWithStatement::JsWithStatement(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::unique_ptr<JsExpression> object,
    std::unique_ptr<JsStatement> body)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsStatement(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      object_(std::move(object)),
      body_(std::move(body)) {}

JsExpression* JsWithStatement::object() {
  return object_.get();
}

const JsExpression* JsWithStatement::object() const {
  return object_.get();
}

void JsWithStatement::set_object(std::unique_ptr<JsExpression> object) {
  object_ = std::move(object);
}

JsStatement* JsWithStatement::body() {
  return body_.get();
}

const JsStatement* JsWithStatement::body() const {
  return body_.get();
}

void JsWithStatement::set_body(std::unique_ptr<JsStatement> body) {
  body_ = std::move(body);
}

// =============================================================================
// JsReturnStatement
// =============================================================================

JsReturnStatement::JsReturnStatement(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::optional<std::unique_ptr<JsExpression>> argument)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsStatement(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      argument_(std::move(argument)) {}

std::optional<JsExpression*> JsReturnStatement::argument() {
  if (!argument_.has_value()) {
    return std::nullopt;
  } else {
    return argument_.value().get();
  }
}

std::optional<const JsExpression*> JsReturnStatement::argument() const {
  if (!argument_.has_value()) {
    return std::nullopt;
  } else {
    return argument_.value().get();
  }
}

void JsReturnStatement::set_argument(std::optional<std::unique_ptr<JsExpression>> argument) {
  argument_ = std::move(argument);
}

// =============================================================================
// JsLabeledStatement
// =============================================================================

JsLabeledStatement::JsLabeledStatement(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::unique_ptr<JsIdentifier> label,
    std::unique_ptr<JsStatement> body)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsStatement(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      label_(std::move(label)),
      body_(std::move(body)) {}

JsIdentifier* JsLabeledStatement::label() {
  return label_.get();
}

const JsIdentifier* JsLabeledStatement::label() const {
  return label_.get();
}

void JsLabeledStatement::set_label(std::unique_ptr<JsIdentifier> label) {
  label_ = std::move(label);
}

JsStatement* JsLabeledStatement::body() {
  return body_.get();
}

const JsStatement* JsLabeledStatement::body() const {
  return body_.get();
}

void JsLabeledStatement::set_body(std::unique_ptr<JsStatement> body) {
  body_ = std::move(body);
}

// =============================================================================
// JsBreakStatement
// =============================================================================

JsBreakStatement::JsBreakStatement(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::optional<std::unique_ptr<JsIdentifier>> label)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsStatement(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      label_(std::move(label)) {}

std::optional<JsIdentifier*> JsBreakStatement::label() {
  if (!label_.has_value()) {
    return std::nullopt;
  } else {
    return label_.value().get();
  }
}

std::optional<const JsIdentifier*> JsBreakStatement::label() const {
  if (!label_.has_value()) {
    return std::nullopt;
  } else {
    return label_.value().get();
  }
}

void JsBreakStatement::set_label(std::optional<std::unique_ptr<JsIdentifier>> label) {
  label_ = std::move(label);
}

// =============================================================================
// JsContinueStatement
// =============================================================================

JsContinueStatement::JsContinueStatement(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::optional<std::unique_ptr<JsIdentifier>> label)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsStatement(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      label_(std::move(label)) {}

std::optional<JsIdentifier*> JsContinueStatement::label() {
  if (!label_.has_value()) {
    return std::nullopt;
  } else {
    return label_.value().get();
  }
}

std::optional<const JsIdentifier*> JsContinueStatement::label() const {
  if (!label_.has_value()) {
    return std::nullopt;
  } else {
    return label_.value().get();
  }
}

void JsContinueStatement::set_label(std::optional<std::unique_ptr<JsIdentifier>> label) {
  label_ = std::move(label);
}

// =============================================================================
// JsIfStatement
// =============================================================================

JsIfStatement::JsIfStatement(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::unique_ptr<JsExpression> test,
    std::unique_ptr<JsStatement> consequent,
    std::optional<std::unique_ptr<JsStatement>> alternate)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsStatement(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      test_(std::move(test)),
      consequent_(std::move(consequent)),
      alternate_(std::move(alternate)) {}

JsExpression* JsIfStatement::test() {
  return test_.get();
}

const JsExpression* JsIfStatement::test() const {
  return test_.get();
}

void JsIfStatement::set_test(std::unique_ptr<JsExpression> test) {
  test_ = std::move(test);
}

JsStatement* JsIfStatement::consequent() {
  return consequent_.get();
}

const JsStatement* JsIfStatement::consequent() const {
  return consequent_.get();
}

void JsIfStatement::set_consequent(std::unique_ptr<JsStatement> consequent) {
  consequent_ = std::move(consequent);
}

std::optional<JsStatement*> JsIfStatement::alternate() {
  if (!alternate_.has_value()) {
    return std::nullopt;
  } else {
    return alternate_.value().get();
  }
}

std::optional<const JsStatement*> JsIfStatement::alternate() const {
  if (!alternate_.has_value()) {
    return std::nullopt;
  } else {
    return alternate_.value().get();
  }
}

void JsIfStatement::set_alternate(std::optional<std::unique_ptr<JsStatement>> alternate) {
  alternate_ = std::move(alternate);
}

// =============================================================================
// JsSwitchCase
// =============================================================================

JsSwitchCase::JsSwitchCase(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::optional<std::unique_ptr<JsExpression>> test,
    std::vector<std::unique_ptr<JsStatement>> consequent)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      test_(std::move(test)),
      consequent_(std::move(consequent)) {}

std::optional<JsExpression*> JsSwitchCase::test() {
  if (!test_.has_value()) {
    return std::nullopt;
  } else {
    return test_.value().get();
  }
}

std::optional<const JsExpression*> JsSwitchCase::test() const {
  if (!test_.has_value()) {
    return std::nullopt;
  } else {
    return test_.value().get();
  }
}

void JsSwitchCase::set_test(std::optional<std::unique_ptr<JsExpression>> test) {
  test_ = std::move(test);
}

std::vector<std::unique_ptr<JsStatement>>* JsSwitchCase::consequent() {
  return &consequent_;
}

const std::vector<std::unique_ptr<JsStatement>>* JsSwitchCase::consequent() const {
  return &consequent_;
}

void JsSwitchCase::set_consequent(std::vector<std::unique_ptr<JsStatement>> consequent) {
  consequent_ = std::move(consequent);
}

// =============================================================================
// JsSwitchStatement
// =============================================================================

JsSwitchStatement::JsSwitchStatement(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::unique_ptr<JsExpression> discriminant,
    std::vector<std::unique_ptr<JsSwitchCase>> cases)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsStatement(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      discriminant_(std::move(discriminant)),
      cases_(std::move(cases)) {}

JsExpression* JsSwitchStatement::discriminant() {
  return discriminant_.get();
}

const JsExpression* JsSwitchStatement::discriminant() const {
  return discriminant_.get();
}

void JsSwitchStatement::set_discriminant(std::unique_ptr<JsExpression> discriminant) {
  discriminant_ = std::move(discriminant);
}

std::vector<std::unique_ptr<JsSwitchCase>>* JsSwitchStatement::cases() {
  return &cases_;
}

const std::vector<std::unique_ptr<JsSwitchCase>>* JsSwitchStatement::cases() const {
  return &cases_;
}

void JsSwitchStatement::set_cases(std::vector<std::unique_ptr<JsSwitchCase>> cases) {
  cases_ = std::move(cases);
}

// =============================================================================
// JsThrowStatement
// =============================================================================

JsThrowStatement::JsThrowStatement(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::unique_ptr<JsExpression> argument)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsStatement(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      argument_(std::move(argument)) {}

JsExpression* JsThrowStatement::argument() {
  return argument_.get();
}

const JsExpression* JsThrowStatement::argument() const {
  return argument_.get();
}

void JsThrowStatement::set_argument(std::unique_ptr<JsExpression> argument) {
  argument_ = std::move(argument);
}

// =============================================================================
// JsCatchClause
// =============================================================================

JsCatchClause::JsCatchClause(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::optional<std::unique_ptr<JsPattern>> param,
    std::unique_ptr<JsBlockStatement> body)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      param_(std::move(param)),
      body_(std::move(body)) {}

std::optional<JsPattern*> JsCatchClause::param() {
  if (!param_.has_value()) {
    return std::nullopt;
  } else {
    return param_.value().get();
  }
}

std::optional<const JsPattern*> JsCatchClause::param() const {
  if (!param_.has_value()) {
    return std::nullopt;
  } else {
    return param_.value().get();
  }
}

void JsCatchClause::set_param(std::optional<std::unique_ptr<JsPattern>> param) {
  param_ = std::move(param);
}

JsBlockStatement* JsCatchClause::body() {
  return body_.get();
}

const JsBlockStatement* JsCatchClause::body() const {
  return body_.get();
}

void JsCatchClause::set_body(std::unique_ptr<JsBlockStatement> body) {
  body_ = std::move(body);
}

// =============================================================================
// JsTryStatement
// =============================================================================

JsTryStatement::JsTryStatement(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::unique_ptr<JsBlockStatement> block,
    std::optional<std::unique_ptr<JsCatchClause>> handler,
    std::optional<std::unique_ptr<JsBlockStatement>> finalizer)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsStatement(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      block_(std::move(block)),
      handler_(std::move(handler)),
      finalizer_(std::move(finalizer)) {}

JsBlockStatement* JsTryStatement::block() {
  return block_.get();
}

const JsBlockStatement* JsTryStatement::block() const {
  return block_.get();
}

void JsTryStatement::set_block(std::unique_ptr<JsBlockStatement> block) {
  block_ = std::move(block);
}

std::optional<JsCatchClause*> JsTryStatement::handler() {
  if (!handler_.has_value()) {
    return std::nullopt;
  } else {
    return handler_.value().get();
  }
}

std::optional<const JsCatchClause*> JsTryStatement::handler() const {
  if (!handler_.has_value()) {
    return std::nullopt;
  } else {
    return handler_.value().get();
  }
}

void JsTryStatement::set_handler(std::optional<std::unique_ptr<JsCatchClause>> handler) {
  handler_ = std::move(handler);
}

std::optional<JsBlockStatement*> JsTryStatement::finalizer() {
  if (!finalizer_.has_value()) {
    return std::nullopt;
  } else {
    return finalizer_.value().get();
  }
}

std::optional<const JsBlockStatement*> JsTryStatement::finalizer() const {
  if (!finalizer_.has_value()) {
    return std::nullopt;
  } else {
    return finalizer_.value().get();
  }
}

void JsTryStatement::set_finalizer(std::optional<std::unique_ptr<JsBlockStatement>> finalizer) {
  finalizer_ = std::move(finalizer);
}

// =============================================================================
// JsWhileStatement
// =============================================================================

JsWhileStatement::JsWhileStatement(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::unique_ptr<JsExpression> test,
    std::unique_ptr<JsStatement> body)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsStatement(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      test_(std::move(test)),
      body_(std::move(body)) {}

JsExpression* JsWhileStatement::test() {
  return test_.get();
}

const JsExpression* JsWhileStatement::test() const {
  return test_.get();
}

void JsWhileStatement::set_test(std::unique_ptr<JsExpression> test) {
  test_ = std::move(test);
}

JsStatement* JsWhileStatement::body() {
  return body_.get();
}

const JsStatement* JsWhileStatement::body() const {
  return body_.get();
}

void JsWhileStatement::set_body(std::unique_ptr<JsStatement> body) {
  body_ = std::move(body);
}

// =============================================================================
// JsDoWhileStatement
// =============================================================================

JsDoWhileStatement::JsDoWhileStatement(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::unique_ptr<JsStatement> body,
    std::unique_ptr<JsExpression> test)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsStatement(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      body_(std::move(body)),
      test_(std::move(test)) {}

JsStatement* JsDoWhileStatement::body() {
  return body_.get();
}

const JsStatement* JsDoWhileStatement::body() const {
  return body_.get();
}

void JsDoWhileStatement::set_body(std::unique_ptr<JsStatement> body) {
  body_ = std::move(body);
}

JsExpression* JsDoWhileStatement::test() {
  return test_.get();
}

const JsExpression* JsDoWhileStatement::test() const {
  return test_.get();
}

void JsDoWhileStatement::set_test(std::unique_ptr<JsExpression> test) {
  test_ = std::move(test);
}

// =============================================================================
// JsDeclaration
// =============================================================================

JsDeclaration::JsDeclaration(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsStatement(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)) {}

// =============================================================================
// JsVariableDeclarator
// =============================================================================

JsVariableDeclarator::JsVariableDeclarator(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::unique_ptr<JsLVal> id,
    std::optional<std::unique_ptr<JsExpression>> init)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      id_(std::move(id)),
      init_(std::move(init)) {}

JsLVal* JsVariableDeclarator::id() {
  return id_.get();
}

const JsLVal* JsVariableDeclarator::id() const {
  return id_.get();
}

void JsVariableDeclarator::set_id(std::unique_ptr<JsLVal> id) {
  id_ = std::move(id);
}

std::optional<JsExpression*> JsVariableDeclarator::init() {
  if (!init_.has_value()) {
    return std::nullopt;
  } else {
    return init_.value().get();
  }
}

std::optional<const JsExpression*> JsVariableDeclarator::init() const {
  if (!init_.has_value()) {
    return std::nullopt;
  } else {
    return init_.value().get();
  }
}

void JsVariableDeclarator::set_init(std::optional<std::unique_ptr<JsExpression>> init) {
  init_ = std::move(init);
}

// =============================================================================
// JsVariableDeclaration
// =============================================================================

JsVariableDeclaration::JsVariableDeclaration(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::vector<std::unique_ptr<JsVariableDeclarator>> declarations,
    std::string kind)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsStatement(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsDeclaration(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      declarations_(std::move(declarations)),
      kind_(std::move(kind)) {}

std::vector<std::unique_ptr<JsVariableDeclarator>>* JsVariableDeclaration::declarations() {
  return &declarations_;
}

const std::vector<std::unique_ptr<JsVariableDeclarator>>* JsVariableDeclaration::declarations() const {
  return &declarations_;
}

void JsVariableDeclaration::set_declarations(std::vector<std::unique_ptr<JsVariableDeclarator>> declarations) {
  declarations_ = std::move(declarations);
}

absl::string_view JsVariableDeclaration::kind() const {
  return kind_;
}

void JsVariableDeclaration::set_kind(std::string kind) {
  kind_ = std::move(kind);
}

// =============================================================================
// JsForStatement
// =============================================================================

JsForStatement::JsForStatement(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::optional<std::variant<std::unique_ptr<JsVariableDeclaration>, std::unique_ptr<JsExpression>>> init,
    std::optional<std::unique_ptr<JsExpression>> test,
    std::optional<std::unique_ptr<JsExpression>> update,
    std::unique_ptr<JsStatement> body)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsStatement(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      init_(std::move(init)),
      test_(std::move(test)),
      update_(std::move(update)),
      body_(std::move(body)) {}

std::optional<std::variant<JsVariableDeclaration*, JsExpression*>> JsForStatement::init() {
  if (!init_.has_value()) {
    return std::nullopt;
  } else {
    switch (init_.value().index()) {
      case 0: {
        return std::get<0>(init_.value()).get();
      }
      case 1: {
        return std::get<1>(init_.value()).get();
      }
      default:
        LOG(FATAL) << "Unreachable code.";
    }
  }
}

std::optional<std::variant<const JsVariableDeclaration*, const JsExpression*>> JsForStatement::init() const {
  if (!init_.has_value()) {
    return std::nullopt;
  } else {
    switch (init_.value().index()) {
      case 0: {
        return std::get<0>(init_.value()).get();
      }
      case 1: {
        return std::get<1>(init_.value()).get();
      }
      default:
        LOG(FATAL) << "Unreachable code.";
    }
  }
}

void JsForStatement::set_init(std::optional<std::variant<std::unique_ptr<JsVariableDeclaration>, std::unique_ptr<JsExpression>>> init) {
  init_ = std::move(init);
}

std::optional<JsExpression*> JsForStatement::test() {
  if (!test_.has_value()) {
    return std::nullopt;
  } else {
    return test_.value().get();
  }
}

std::optional<const JsExpression*> JsForStatement::test() const {
  if (!test_.has_value()) {
    return std::nullopt;
  } else {
    return test_.value().get();
  }
}

void JsForStatement::set_test(std::optional<std::unique_ptr<JsExpression>> test) {
  test_ = std::move(test);
}

std::optional<JsExpression*> JsForStatement::update() {
  if (!update_.has_value()) {
    return std::nullopt;
  } else {
    return update_.value().get();
  }
}

std::optional<const JsExpression*> JsForStatement::update() const {
  if (!update_.has_value()) {
    return std::nullopt;
  } else {
    return update_.value().get();
  }
}

void JsForStatement::set_update(std::optional<std::unique_ptr<JsExpression>> update) {
  update_ = std::move(update);
}

JsStatement* JsForStatement::body() {
  return body_.get();
}

const JsStatement* JsForStatement::body() const {
  return body_.get();
}

void JsForStatement::set_body(std::unique_ptr<JsStatement> body) {
  body_ = std::move(body);
}

// =============================================================================
// JsForInStatement
// =============================================================================

JsForInStatement::JsForInStatement(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::variant<std::unique_ptr<JsVariableDeclaration>, std::unique_ptr<JsLVal>> left,
    std::unique_ptr<JsExpression> right,
    std::unique_ptr<JsStatement> body)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsStatement(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      left_(std::move(left)),
      right_(std::move(right)),
      body_(std::move(body)) {}

std::variant<JsVariableDeclaration*, JsLVal*> JsForInStatement::left() {
  switch (left_.index()) {
    case 0: {
      return std::get<0>(left_).get();
    }
    case 1: {
      return std::get<1>(left_).get();
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
}

std::variant<const JsVariableDeclaration*, const JsLVal*> JsForInStatement::left() const {
  switch (left_.index()) {
    case 0: {
      return std::get<0>(left_).get();
    }
    case 1: {
      return std::get<1>(left_).get();
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
}

void JsForInStatement::set_left(std::variant<std::unique_ptr<JsVariableDeclaration>, std::unique_ptr<JsLVal>> left) {
  left_ = std::move(left);
}

JsExpression* JsForInStatement::right() {
  return right_.get();
}

const JsExpression* JsForInStatement::right() const {
  return right_.get();
}

void JsForInStatement::set_right(std::unique_ptr<JsExpression> right) {
  right_ = std::move(right);
}

JsStatement* JsForInStatement::body() {
  return body_.get();
}

const JsStatement* JsForInStatement::body() const {
  return body_.get();
}

void JsForInStatement::set_body(std::unique_ptr<JsStatement> body) {
  body_ = std::move(body);
}

// =============================================================================
// JsForOfStatement
// =============================================================================

JsForOfStatement::JsForOfStatement(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::variant<std::unique_ptr<JsVariableDeclaration>, std::unique_ptr<JsLVal>> left,
    std::unique_ptr<JsExpression> right,
    std::unique_ptr<JsStatement> body,
    bool await)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsStatement(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      left_(std::move(left)),
      right_(std::move(right)),
      body_(std::move(body)),
      await_(std::move(await)) {}

std::variant<JsVariableDeclaration*, JsLVal*> JsForOfStatement::left() {
  switch (left_.index()) {
    case 0: {
      return std::get<0>(left_).get();
    }
    case 1: {
      return std::get<1>(left_).get();
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
}

std::variant<const JsVariableDeclaration*, const JsLVal*> JsForOfStatement::left() const {
  switch (left_.index()) {
    case 0: {
      return std::get<0>(left_).get();
    }
    case 1: {
      return std::get<1>(left_).get();
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
}

void JsForOfStatement::set_left(std::variant<std::unique_ptr<JsVariableDeclaration>, std::unique_ptr<JsLVal>> left) {
  left_ = std::move(left);
}

JsExpression* JsForOfStatement::right() {
  return right_.get();
}

const JsExpression* JsForOfStatement::right() const {
  return right_.get();
}

void JsForOfStatement::set_right(std::unique_ptr<JsExpression> right) {
  right_ = std::move(right);
}

JsStatement* JsForOfStatement::body() {
  return body_.get();
}

const JsStatement* JsForOfStatement::body() const {
  return body_.get();
}

void JsForOfStatement::set_body(std::unique_ptr<JsStatement> body) {
  body_ = std::move(body);
}

bool JsForOfStatement::await() const {
  return await_;
}

void JsForOfStatement::set_await(bool await) {
  await_ = await;
}

// =============================================================================
// JsFunctionDeclaration
// =============================================================================

JsFunctionDeclaration::JsFunctionDeclaration(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::optional<std::unique_ptr<JsIdentifier>> id,
    std::vector<std::unique_ptr<JsPattern>> params,
    bool generator,
    bool async,
    std::unique_ptr<JsBlockStatement> body)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsFunction(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols), std::move(id), std::move(params), std::move(generator), std::move(async)),
      JsBlockStatementFunction(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols), std::move(id), std::move(params), std::move(generator), std::move(async), std::move(body)),
      JsStatement(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsDeclaration(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)) {}

// =============================================================================
// JsSuper
// =============================================================================

JsSuper::JsSuper(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)) {}

// =============================================================================
// JsImport
// =============================================================================

JsImport::JsImport(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)) {}

// =============================================================================
// JsThisExpression
// =============================================================================

JsThisExpression::JsThisExpression(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsExpression(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)) {}

// =============================================================================
// JsArrowFunctionExpression
// =============================================================================

JsArrowFunctionExpression::JsArrowFunctionExpression(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::optional<std::unique_ptr<JsIdentifier>> id,
    std::vector<std::unique_ptr<JsPattern>> params,
    bool generator,
    bool async,
    std::variant<std::unique_ptr<JsBlockStatement>, std::unique_ptr<JsExpression>> body)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsFunction(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols), std::move(id), std::move(params), std::move(generator), std::move(async)),
      JsExpression(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      body_(std::move(body)) {}

std::variant<JsBlockStatement*, JsExpression*> JsArrowFunctionExpression::body() {
  switch (body_.index()) {
    case 0: {
      return std::get<0>(body_).get();
    }
    case 1: {
      return std::get<1>(body_).get();
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
}

std::variant<const JsBlockStatement*, const JsExpression*> JsArrowFunctionExpression::body() const {
  switch (body_.index()) {
    case 0: {
      return std::get<0>(body_).get();
    }
    case 1: {
      return std::get<1>(body_).get();
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
}

void JsArrowFunctionExpression::set_body(std::variant<std::unique_ptr<JsBlockStatement>, std::unique_ptr<JsExpression>> body) {
  body_ = std::move(body);
}

// =============================================================================
// JsYieldExpression
// =============================================================================

JsYieldExpression::JsYieldExpression(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::optional<std::unique_ptr<JsExpression>> argument,
    bool delegate)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsExpression(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      argument_(std::move(argument)),
      delegate_(std::move(delegate)) {}

std::optional<JsExpression*> JsYieldExpression::argument() {
  if (!argument_.has_value()) {
    return std::nullopt;
  } else {
    return argument_.value().get();
  }
}

std::optional<const JsExpression*> JsYieldExpression::argument() const {
  if (!argument_.has_value()) {
    return std::nullopt;
  } else {
    return argument_.value().get();
  }
}

void JsYieldExpression::set_argument(std::optional<std::unique_ptr<JsExpression>> argument) {
  argument_ = std::move(argument);
}

bool JsYieldExpression::delegate() const {
  return delegate_;
}

void JsYieldExpression::set_delegate(bool delegate) {
  delegate_ = delegate;
}

// =============================================================================
// JsAwaitExpression
// =============================================================================

JsAwaitExpression::JsAwaitExpression(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::optional<std::unique_ptr<JsExpression>> argument)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsExpression(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      argument_(std::move(argument)) {}

std::optional<JsExpression*> JsAwaitExpression::argument() {
  if (!argument_.has_value()) {
    return std::nullopt;
  } else {
    return argument_.value().get();
  }
}

std::optional<const JsExpression*> JsAwaitExpression::argument() const {
  if (!argument_.has_value()) {
    return std::nullopt;
  } else {
    return argument_.value().get();
  }
}

void JsAwaitExpression::set_argument(std::optional<std::unique_ptr<JsExpression>> argument) {
  argument_ = std::move(argument);
}

// =============================================================================
// JsSpreadElement
// =============================================================================

JsSpreadElement::JsSpreadElement(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::unique_ptr<JsExpression> argument)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      argument_(std::move(argument)) {}

JsExpression* JsSpreadElement::argument() {
  return argument_.get();
}

const JsExpression* JsSpreadElement::argument() const {
  return argument_.get();
}

void JsSpreadElement::set_argument(std::unique_ptr<JsExpression> argument) {
  argument_ = std::move(argument);
}

// =============================================================================
// JsArrayExpression
// =============================================================================

JsArrayExpression::JsArrayExpression(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::vector<std::optional<std::variant<std::unique_ptr<JsExpression>, std::unique_ptr<JsSpreadElement>>>> elements)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsExpression(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      elements_(std::move(elements)) {}

std::vector<std::optional<std::variant<std::unique_ptr<JsExpression>, std::unique_ptr<JsSpreadElement>>>>* JsArrayExpression::elements() {
  return &elements_;
}

const std::vector<std::optional<std::variant<std::unique_ptr<JsExpression>, std::unique_ptr<JsSpreadElement>>>>* JsArrayExpression::elements() const {
  return &elements_;
}

void JsArrayExpression::set_elements(std::vector<std::optional<std::variant<std::unique_ptr<JsExpression>, std::unique_ptr<JsSpreadElement>>>> elements) {
  elements_ = std::move(elements);
}

// =============================================================================
// JsObjectMember
// =============================================================================

JsObjectMember::JsObjectMember(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::unique_ptr<JsExpression> key,
    bool computed)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      key_(std::move(key)),
      computed_(std::move(computed)) {}

JsExpression* JsObjectMember::key() {
  return key_.get();
}

const JsExpression* JsObjectMember::key() const {
  return key_.get();
}

void JsObjectMember::set_key(std::unique_ptr<JsExpression> key) {
  key_ = std::move(key);
}

bool JsObjectMember::computed() const {
  return computed_;
}

void JsObjectMember::set_computed(bool computed) {
  computed_ = computed;
}

// =============================================================================
// JsObjectProperty
// =============================================================================

JsObjectProperty::JsObjectProperty(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::unique_ptr<JsExpression> key,
    bool computed,
    bool shorthand,
    std::variant<std::unique_ptr<JsExpression>, std::unique_ptr<JsPattern>> value)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsObjectMember(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols), std::move(key), std::move(computed)),
      shorthand_(std::move(shorthand)),
      value_(std::move(value)) {}

bool JsObjectProperty::shorthand() const {
  return shorthand_;
}

void JsObjectProperty::set_shorthand(bool shorthand) {
  shorthand_ = shorthand;
}

std::variant<JsExpression*, JsPattern*> JsObjectProperty::value() {
  switch (value_.index()) {
    case 0: {
      return std::get<0>(value_).get();
    }
    case 1: {
      return std::get<1>(value_).get();
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
}

std::variant<const JsExpression*, const JsPattern*> JsObjectProperty::value() const {
  switch (value_.index()) {
    case 0: {
      return std::get<0>(value_).get();
    }
    case 1: {
      return std::get<1>(value_).get();
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
}

void JsObjectProperty::set_value(std::variant<std::unique_ptr<JsExpression>, std::unique_ptr<JsPattern>> value) {
  value_ = std::move(value);
}

// =============================================================================
// JsObjectMethod
// =============================================================================

JsObjectMethod::JsObjectMethod(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::unique_ptr<JsExpression> key,
    bool computed,
    std::optional<std::unique_ptr<JsIdentifier>> id,
    std::vector<std::unique_ptr<JsPattern>> params,
    bool generator,
    bool async,
    std::unique_ptr<JsBlockStatement> body,
    std::string kind)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsObjectMember(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols), std::move(key), std::move(computed)),
      JsFunction(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols), std::move(id), std::move(params), std::move(generator), std::move(async)),
      JsBlockStatementFunction(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols), std::move(id), std::move(params), std::move(generator), std::move(async), std::move(body)),
      kind_(std::move(kind)) {}

absl::string_view JsObjectMethod::kind() const {
  return kind_;
}

void JsObjectMethod::set_kind(std::string kind) {
  kind_ = std::move(kind);
}

// =============================================================================
// JsObjectExpression
// =============================================================================

JsObjectExpression::JsObjectExpression(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::vector<std::variant<std::unique_ptr<JsObjectProperty>, std::unique_ptr<JsObjectMethod>, std::unique_ptr<JsSpreadElement>>> properties_)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsExpression(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      properties__(std::move(properties_)) {}

std::vector<std::variant<std::unique_ptr<JsObjectProperty>, std::unique_ptr<JsObjectMethod>, std::unique_ptr<JsSpreadElement>>>* JsObjectExpression::properties_() {
  return &properties__;
}

const std::vector<std::variant<std::unique_ptr<JsObjectProperty>, std::unique_ptr<JsObjectMethod>, std::unique_ptr<JsSpreadElement>>>* JsObjectExpression::properties_() const {
  return &properties__;
}

void JsObjectExpression::set_properties_(std::vector<std::variant<std::unique_ptr<JsObjectProperty>, std::unique_ptr<JsObjectMethod>, std::unique_ptr<JsSpreadElement>>> properties_) {
  properties__ = std::move(properties_);
}

// =============================================================================
// JsFunctionExpression
// =============================================================================

JsFunctionExpression::JsFunctionExpression(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::optional<std::unique_ptr<JsIdentifier>> id,
    std::vector<std::unique_ptr<JsPattern>> params,
    bool generator,
    bool async,
    std::unique_ptr<JsBlockStatement> body)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsFunction(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols), std::move(id), std::move(params), std::move(generator), std::move(async)),
      JsBlockStatementFunction(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols), std::move(id), std::move(params), std::move(generator), std::move(async), std::move(body)),
      JsExpression(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)) {}

// =============================================================================
// JsUnaryExpression
// =============================================================================

JsUnaryExpression::JsUnaryExpression(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    JsUnaryOperator operator_,
    bool prefix,
    std::unique_ptr<JsExpression> argument)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsExpression(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      operator__(std::move(operator_)),
      prefix_(std::move(prefix)),
      argument_(std::move(argument)) {}

JsUnaryOperator JsUnaryExpression::operator_() const {
  return operator__;
}

void JsUnaryExpression::set_operator_(JsUnaryOperator operator_) {
  operator__ = operator_;
}

bool JsUnaryExpression::prefix() const {
  return prefix_;
}

void JsUnaryExpression::set_prefix(bool prefix) {
  prefix_ = prefix;
}

JsExpression* JsUnaryExpression::argument() {
  return argument_.get();
}

const JsExpression* JsUnaryExpression::argument() const {
  return argument_.get();
}

void JsUnaryExpression::set_argument(std::unique_ptr<JsExpression> argument) {
  argument_ = std::move(argument);
}

// =============================================================================
// JsUpdateExpression
// =============================================================================

JsUpdateExpression::JsUpdateExpression(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    JsUpdateOperator operator_,
    std::unique_ptr<JsLVal> argument,
    bool prefix)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsExpression(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      operator__(std::move(operator_)),
      argument_(std::move(argument)),
      prefix_(std::move(prefix)) {}

JsUpdateOperator JsUpdateExpression::operator_() const {
  return operator__;
}

void JsUpdateExpression::set_operator_(JsUpdateOperator operator_) {
  operator__ = operator_;
}

JsLVal* JsUpdateExpression::argument() {
  return argument_.get();
}

const JsLVal* JsUpdateExpression::argument() const {
  return argument_.get();
}

void JsUpdateExpression::set_argument(std::unique_ptr<JsLVal> argument) {
  argument_ = std::move(argument);
}

bool JsUpdateExpression::prefix() const {
  return prefix_;
}

void JsUpdateExpression::set_prefix(bool prefix) {
  prefix_ = prefix;
}

// =============================================================================
// JsBinaryExpression
// =============================================================================

JsBinaryExpression::JsBinaryExpression(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    JsBinaryOperator operator_,
    std::variant<std::unique_ptr<JsExpression>, std::unique_ptr<JsPrivateName>> left,
    std::unique_ptr<JsExpression> right)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsExpression(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      operator__(std::move(operator_)),
      left_(std::move(left)),
      right_(std::move(right)) {}

JsBinaryOperator JsBinaryExpression::operator_() const {
  return operator__;
}

void JsBinaryExpression::set_operator_(JsBinaryOperator operator_) {
  operator__ = operator_;
}

std::variant<JsExpression*, JsPrivateName*> JsBinaryExpression::left() {
  switch (left_.index()) {
    case 0: {
      return std::get<0>(left_).get();
    }
    case 1: {
      return std::get<1>(left_).get();
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
}

std::variant<const JsExpression*, const JsPrivateName*> JsBinaryExpression::left() const {
  switch (left_.index()) {
    case 0: {
      return std::get<0>(left_).get();
    }
    case 1: {
      return std::get<1>(left_).get();
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
}

void JsBinaryExpression::set_left(std::variant<std::unique_ptr<JsExpression>, std::unique_ptr<JsPrivateName>> left) {
  left_ = std::move(left);
}

JsExpression* JsBinaryExpression::right() {
  return right_.get();
}

const JsExpression* JsBinaryExpression::right() const {
  return right_.get();
}

void JsBinaryExpression::set_right(std::unique_ptr<JsExpression> right) {
  right_ = std::move(right);
}

// =============================================================================
// JsAssignmentExpression
// =============================================================================

JsAssignmentExpression::JsAssignmentExpression(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    JsAssignmentOperator operator_,
    std::unique_ptr<JsLVal> left,
    std::unique_ptr<JsExpression> right)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsExpression(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      operator__(std::move(operator_)),
      left_(std::move(left)),
      right_(std::move(right)) {}

JsAssignmentOperator JsAssignmentExpression::operator_() const {
  return operator__;
}

void JsAssignmentExpression::set_operator_(JsAssignmentOperator operator_) {
  operator__ = operator_;
}

JsLVal* JsAssignmentExpression::left() {
  return left_.get();
}

const JsLVal* JsAssignmentExpression::left() const {
  return left_.get();
}

void JsAssignmentExpression::set_left(std::unique_ptr<JsLVal> left) {
  left_ = std::move(left);
}

JsExpression* JsAssignmentExpression::right() {
  return right_.get();
}

const JsExpression* JsAssignmentExpression::right() const {
  return right_.get();
}

void JsAssignmentExpression::set_right(std::unique_ptr<JsExpression> right) {
  right_ = std::move(right);
}

// =============================================================================
// JsLogicalExpression
// =============================================================================

JsLogicalExpression::JsLogicalExpression(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    JsLogicalOperator operator_,
    std::unique_ptr<JsExpression> left,
    std::unique_ptr<JsExpression> right)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsExpression(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      operator__(std::move(operator_)),
      left_(std::move(left)),
      right_(std::move(right)) {}

JsLogicalOperator JsLogicalExpression::operator_() const {
  return operator__;
}

void JsLogicalExpression::set_operator_(JsLogicalOperator operator_) {
  operator__ = operator_;
}

JsExpression* JsLogicalExpression::left() {
  return left_.get();
}

const JsExpression* JsLogicalExpression::left() const {
  return left_.get();
}

void JsLogicalExpression::set_left(std::unique_ptr<JsExpression> left) {
  left_ = std::move(left);
}

JsExpression* JsLogicalExpression::right() {
  return right_.get();
}

const JsExpression* JsLogicalExpression::right() const {
  return right_.get();
}

void JsLogicalExpression::set_right(std::unique_ptr<JsExpression> right) {
  right_ = std::move(right);
}

// =============================================================================
// JsMemberExpression
// =============================================================================

JsMemberExpression::JsMemberExpression(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::variant<std::unique_ptr<JsExpression>, std::unique_ptr<JsSuper>> object,
    std::variant<std::unique_ptr<JsExpression>, std::unique_ptr<JsPrivateName>> property,
    bool computed)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsExpression(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsPattern(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsLVal(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      object_(std::move(object)),
      property_(std::move(property)),
      computed_(std::move(computed)) {}

std::variant<JsExpression*, JsSuper*> JsMemberExpression::object() {
  switch (object_.index()) {
    case 0: {
      return std::get<0>(object_).get();
    }
    case 1: {
      return std::get<1>(object_).get();
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
}

std::variant<const JsExpression*, const JsSuper*> JsMemberExpression::object() const {
  switch (object_.index()) {
    case 0: {
      return std::get<0>(object_).get();
    }
    case 1: {
      return std::get<1>(object_).get();
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
}

void JsMemberExpression::set_object(std::variant<std::unique_ptr<JsExpression>, std::unique_ptr<JsSuper>> object) {
  object_ = std::move(object);
}

std::variant<JsExpression*, JsPrivateName*> JsMemberExpression::property() {
  switch (property_.index()) {
    case 0: {
      return std::get<0>(property_).get();
    }
    case 1: {
      return std::get<1>(property_).get();
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
}

std::variant<const JsExpression*, const JsPrivateName*> JsMemberExpression::property() const {
  switch (property_.index()) {
    case 0: {
      return std::get<0>(property_).get();
    }
    case 1: {
      return std::get<1>(property_).get();
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
}

void JsMemberExpression::set_property(std::variant<std::unique_ptr<JsExpression>, std::unique_ptr<JsPrivateName>> property) {
  property_ = std::move(property);
}

bool JsMemberExpression::computed() const {
  return computed_;
}

void JsMemberExpression::set_computed(bool computed) {
  computed_ = computed;
}

// =============================================================================
// JsOptionalMemberExpression
// =============================================================================

JsOptionalMemberExpression::JsOptionalMemberExpression(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::unique_ptr<JsExpression> object,
    std::variant<std::unique_ptr<JsExpression>, std::unique_ptr<JsPrivateName>> property,
    bool computed,
    bool optional)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsExpression(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      object_(std::move(object)),
      property_(std::move(property)),
      computed_(std::move(computed)),
      optional_(std::move(optional)) {}

JsExpression* JsOptionalMemberExpression::object() {
  return object_.get();
}

const JsExpression* JsOptionalMemberExpression::object() const {
  return object_.get();
}

void JsOptionalMemberExpression::set_object(std::unique_ptr<JsExpression> object) {
  object_ = std::move(object);
}

std::variant<JsExpression*, JsPrivateName*> JsOptionalMemberExpression::property() {
  switch (property_.index()) {
    case 0: {
      return std::get<0>(property_).get();
    }
    case 1: {
      return std::get<1>(property_).get();
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
}

std::variant<const JsExpression*, const JsPrivateName*> JsOptionalMemberExpression::property() const {
  switch (property_.index()) {
    case 0: {
      return std::get<0>(property_).get();
    }
    case 1: {
      return std::get<1>(property_).get();
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
}

void JsOptionalMemberExpression::set_property(std::variant<std::unique_ptr<JsExpression>, std::unique_ptr<JsPrivateName>> property) {
  property_ = std::move(property);
}

bool JsOptionalMemberExpression::computed() const {
  return computed_;
}

void JsOptionalMemberExpression::set_computed(bool computed) {
  computed_ = computed;
}

bool JsOptionalMemberExpression::optional() const {
  return optional_;
}

void JsOptionalMemberExpression::set_optional(bool optional) {
  optional_ = optional;
}

// =============================================================================
// JsConditionalExpression
// =============================================================================

JsConditionalExpression::JsConditionalExpression(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::unique_ptr<JsExpression> test,
    std::unique_ptr<JsExpression> alternate,
    std::unique_ptr<JsExpression> consequent)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsExpression(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      test_(std::move(test)),
      alternate_(std::move(alternate)),
      consequent_(std::move(consequent)) {}

JsExpression* JsConditionalExpression::test() {
  return test_.get();
}

const JsExpression* JsConditionalExpression::test() const {
  return test_.get();
}

void JsConditionalExpression::set_test(std::unique_ptr<JsExpression> test) {
  test_ = std::move(test);
}

JsExpression* JsConditionalExpression::alternate() {
  return alternate_.get();
}

const JsExpression* JsConditionalExpression::alternate() const {
  return alternate_.get();
}

void JsConditionalExpression::set_alternate(std::unique_ptr<JsExpression> alternate) {
  alternate_ = std::move(alternate);
}

JsExpression* JsConditionalExpression::consequent() {
  return consequent_.get();
}

const JsExpression* JsConditionalExpression::consequent() const {
  return consequent_.get();
}

void JsConditionalExpression::set_consequent(std::unique_ptr<JsExpression> consequent) {
  consequent_ = std::move(consequent);
}

// =============================================================================
// JsCallExpression
// =============================================================================

JsCallExpression::JsCallExpression(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::variant<std::unique_ptr<JsExpression>, std::unique_ptr<JsSuper>, std::unique_ptr<JsImport>> callee,
    std::vector<std::variant<std::unique_ptr<JsExpression>, std::unique_ptr<JsSpreadElement>>> arguments)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsExpression(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      callee_(std::move(callee)),
      arguments_(std::move(arguments)) {}

std::variant<JsExpression*, JsSuper*, JsImport*> JsCallExpression::callee() {
  switch (callee_.index()) {
    case 0: {
      return std::get<0>(callee_).get();
    }
    case 1: {
      return std::get<1>(callee_).get();
    }
    case 2: {
      return std::get<2>(callee_).get();
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
}

std::variant<const JsExpression*, const JsSuper*, const JsImport*> JsCallExpression::callee() const {
  switch (callee_.index()) {
    case 0: {
      return std::get<0>(callee_).get();
    }
    case 1: {
      return std::get<1>(callee_).get();
    }
    case 2: {
      return std::get<2>(callee_).get();
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
}

void JsCallExpression::set_callee(std::variant<std::unique_ptr<JsExpression>, std::unique_ptr<JsSuper>, std::unique_ptr<JsImport>> callee) {
  callee_ = std::move(callee);
}

std::vector<std::variant<std::unique_ptr<JsExpression>, std::unique_ptr<JsSpreadElement>>>* JsCallExpression::arguments() {
  return &arguments_;
}

const std::vector<std::variant<std::unique_ptr<JsExpression>, std::unique_ptr<JsSpreadElement>>>* JsCallExpression::arguments() const {
  return &arguments_;
}

void JsCallExpression::set_arguments(std::vector<std::variant<std::unique_ptr<JsExpression>, std::unique_ptr<JsSpreadElement>>> arguments) {
  arguments_ = std::move(arguments);
}

// =============================================================================
// JsOptionalCallExpression
// =============================================================================

JsOptionalCallExpression::JsOptionalCallExpression(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::unique_ptr<JsExpression> callee,
    std::vector<std::variant<std::unique_ptr<JsExpression>, std::unique_ptr<JsSpreadElement>>> arguments,
    bool optional)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsExpression(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      callee_(std::move(callee)),
      arguments_(std::move(arguments)),
      optional_(std::move(optional)) {}

JsExpression* JsOptionalCallExpression::callee() {
  return callee_.get();
}

const JsExpression* JsOptionalCallExpression::callee() const {
  return callee_.get();
}

void JsOptionalCallExpression::set_callee(std::unique_ptr<JsExpression> callee) {
  callee_ = std::move(callee);
}

std::vector<std::variant<std::unique_ptr<JsExpression>, std::unique_ptr<JsSpreadElement>>>* JsOptionalCallExpression::arguments() {
  return &arguments_;
}

const std::vector<std::variant<std::unique_ptr<JsExpression>, std::unique_ptr<JsSpreadElement>>>* JsOptionalCallExpression::arguments() const {
  return &arguments_;
}

void JsOptionalCallExpression::set_arguments(std::vector<std::variant<std::unique_ptr<JsExpression>, std::unique_ptr<JsSpreadElement>>> arguments) {
  arguments_ = std::move(arguments);
}

bool JsOptionalCallExpression::optional() const {
  return optional_;
}

void JsOptionalCallExpression::set_optional(bool optional) {
  optional_ = optional;
}

// =============================================================================
// JsNewExpression
// =============================================================================

JsNewExpression::JsNewExpression(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::variant<std::unique_ptr<JsExpression>, std::unique_ptr<JsSuper>, std::unique_ptr<JsImport>> callee,
    std::vector<std::variant<std::unique_ptr<JsExpression>, std::unique_ptr<JsSpreadElement>>> arguments)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsExpression(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      callee_(std::move(callee)),
      arguments_(std::move(arguments)) {}

std::variant<JsExpression*, JsSuper*, JsImport*> JsNewExpression::callee() {
  switch (callee_.index()) {
    case 0: {
      return std::get<0>(callee_).get();
    }
    case 1: {
      return std::get<1>(callee_).get();
    }
    case 2: {
      return std::get<2>(callee_).get();
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
}

std::variant<const JsExpression*, const JsSuper*, const JsImport*> JsNewExpression::callee() const {
  switch (callee_.index()) {
    case 0: {
      return std::get<0>(callee_).get();
    }
    case 1: {
      return std::get<1>(callee_).get();
    }
    case 2: {
      return std::get<2>(callee_).get();
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
}

void JsNewExpression::set_callee(std::variant<std::unique_ptr<JsExpression>, std::unique_ptr<JsSuper>, std::unique_ptr<JsImport>> callee) {
  callee_ = std::move(callee);
}

std::vector<std::variant<std::unique_ptr<JsExpression>, std::unique_ptr<JsSpreadElement>>>* JsNewExpression::arguments() {
  return &arguments_;
}

const std::vector<std::variant<std::unique_ptr<JsExpression>, std::unique_ptr<JsSpreadElement>>>* JsNewExpression::arguments() const {
  return &arguments_;
}

void JsNewExpression::set_arguments(std::vector<std::variant<std::unique_ptr<JsExpression>, std::unique_ptr<JsSpreadElement>>> arguments) {
  arguments_ = std::move(arguments);
}

// =============================================================================
// JsSequenceExpression
// =============================================================================

JsSequenceExpression::JsSequenceExpression(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::vector<std::unique_ptr<JsExpression>> expressions)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsExpression(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      expressions_(std::move(expressions)) {}

std::vector<std::unique_ptr<JsExpression>>* JsSequenceExpression::expressions() {
  return &expressions_;
}

const std::vector<std::unique_ptr<JsExpression>>* JsSequenceExpression::expressions() const {
  return &expressions_;
}

void JsSequenceExpression::set_expressions(std::vector<std::unique_ptr<JsExpression>> expressions) {
  expressions_ = std::move(expressions);
}

// =============================================================================
// JsParenthesizedExpression
// =============================================================================

JsParenthesizedExpression::JsParenthesizedExpression(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::unique_ptr<JsExpression> expression)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsExpression(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsPattern(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsLVal(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      expression_(std::move(expression)) {}

JsExpression* JsParenthesizedExpression::expression() {
  return expression_.get();
}

const JsExpression* JsParenthesizedExpression::expression() const {
  return expression_.get();
}

void JsParenthesizedExpression::set_expression(std::unique_ptr<JsExpression> expression) {
  expression_ = std::move(expression);
}

// =============================================================================
// JsTemplateElementValue
// =============================================================================

JsTemplateElementValue::JsTemplateElementValue(
    std::optional<std::string> cooked,
    std::string raw)
    : cooked_(std::move(cooked)),
      raw_(std::move(raw)) {}

std::optional<absl::string_view> JsTemplateElementValue::cooked() const {
  if (!cooked_.has_value()) {
    return std::nullopt;
  } else {
    return cooked_.value();
  }
}

void JsTemplateElementValue::set_cooked(std::optional<std::string> cooked) {
  cooked_ = std::move(cooked);
}

absl::string_view JsTemplateElementValue::raw() const {
  return raw_;
}

void JsTemplateElementValue::set_raw(std::string raw) {
  raw_ = std::move(raw);
}

// =============================================================================
// JsTemplateElement
// =============================================================================

JsTemplateElement::JsTemplateElement(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    bool tail,
    std::unique_ptr<JsTemplateElementValue> value)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      tail_(std::move(tail)),
      value_(std::move(value)) {}

bool JsTemplateElement::tail() const {
  return tail_;
}

void JsTemplateElement::set_tail(bool tail) {
  tail_ = tail;
}

JsTemplateElementValue* JsTemplateElement::value() {
  return value_.get();
}

const JsTemplateElementValue* JsTemplateElement::value() const {
  return value_.get();
}

void JsTemplateElement::set_value(std::unique_ptr<JsTemplateElementValue> value) {
  value_ = std::move(value);
}

// =============================================================================
// JsTemplateLiteral
// =============================================================================

JsTemplateLiteral::JsTemplateLiteral(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::vector<std::unique_ptr<JsTemplateElement>> quasis,
    std::vector<std::unique_ptr<JsExpression>> expressions)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsExpression(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      quasis_(std::move(quasis)),
      expressions_(std::move(expressions)) {}

std::vector<std::unique_ptr<JsTemplateElement>>* JsTemplateLiteral::quasis() {
  return &quasis_;
}

const std::vector<std::unique_ptr<JsTemplateElement>>* JsTemplateLiteral::quasis() const {
  return &quasis_;
}

void JsTemplateLiteral::set_quasis(std::vector<std::unique_ptr<JsTemplateElement>> quasis) {
  quasis_ = std::move(quasis);
}

std::vector<std::unique_ptr<JsExpression>>* JsTemplateLiteral::expressions() {
  return &expressions_;
}

const std::vector<std::unique_ptr<JsExpression>>* JsTemplateLiteral::expressions() const {
  return &expressions_;
}

void JsTemplateLiteral::set_expressions(std::vector<std::unique_ptr<JsExpression>> expressions) {
  expressions_ = std::move(expressions);
}

// =============================================================================
// JsTaggedTemplateExpression
// =============================================================================

JsTaggedTemplateExpression::JsTaggedTemplateExpression(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::unique_ptr<JsExpression> tag,
    std::unique_ptr<JsTemplateLiteral> quasi)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsExpression(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      tag_(std::move(tag)),
      quasi_(std::move(quasi)) {}

JsExpression* JsTaggedTemplateExpression::tag() {
  return tag_.get();
}

const JsExpression* JsTaggedTemplateExpression::tag() const {
  return tag_.get();
}

void JsTaggedTemplateExpression::set_tag(std::unique_ptr<JsExpression> tag) {
  tag_ = std::move(tag);
}

JsTemplateLiteral* JsTaggedTemplateExpression::quasi() {
  return quasi_.get();
}

const JsTemplateLiteral* JsTaggedTemplateExpression::quasi() const {
  return quasi_.get();
}

void JsTaggedTemplateExpression::set_quasi(std::unique_ptr<JsTemplateLiteral> quasi) {
  quasi_ = std::move(quasi);
}

// =============================================================================
// JsRestElement
// =============================================================================

JsRestElement::JsRestElement(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::unique_ptr<JsLVal> argument)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsPattern(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsLVal(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      argument_(std::move(argument)) {}

JsLVal* JsRestElement::argument() {
  return argument_.get();
}

const JsLVal* JsRestElement::argument() const {
  return argument_.get();
}

void JsRestElement::set_argument(std::unique_ptr<JsLVal> argument) {
  argument_ = std::move(argument);
}

// =============================================================================
// JsObjectPattern
// =============================================================================

JsObjectPattern::JsObjectPattern(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::vector<std::variant<std::unique_ptr<JsObjectProperty>, std::unique_ptr<JsRestElement>>> properties_)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsPattern(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsLVal(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      properties__(std::move(properties_)) {}

std::vector<std::variant<std::unique_ptr<JsObjectProperty>, std::unique_ptr<JsRestElement>>>* JsObjectPattern::properties_() {
  return &properties__;
}

const std::vector<std::variant<std::unique_ptr<JsObjectProperty>, std::unique_ptr<JsRestElement>>>* JsObjectPattern::properties_() const {
  return &properties__;
}

void JsObjectPattern::set_properties_(std::vector<std::variant<std::unique_ptr<JsObjectProperty>, std::unique_ptr<JsRestElement>>> properties_) {
  properties__ = std::move(properties_);
}

// =============================================================================
// JsArrayPattern
// =============================================================================

JsArrayPattern::JsArrayPattern(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::vector<std::optional<std::unique_ptr<JsPattern>>> elements)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsPattern(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsLVal(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      elements_(std::move(elements)) {}

std::vector<std::optional<std::unique_ptr<JsPattern>>>* JsArrayPattern::elements() {
  return &elements_;
}

const std::vector<std::optional<std::unique_ptr<JsPattern>>>* JsArrayPattern::elements() const {
  return &elements_;
}

void JsArrayPattern::set_elements(std::vector<std::optional<std::unique_ptr<JsPattern>>> elements) {
  elements_ = std::move(elements);
}

// =============================================================================
// JsAssignmentPattern
// =============================================================================

JsAssignmentPattern::JsAssignmentPattern(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::unique_ptr<JsPattern> left,
    std::unique_ptr<JsExpression> right)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsPattern(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsLVal(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      left_(std::move(left)),
      right_(std::move(right)) {}

JsPattern* JsAssignmentPattern::left() {
  return left_.get();
}

const JsPattern* JsAssignmentPattern::left() const {
  return left_.get();
}

void JsAssignmentPattern::set_left(std::unique_ptr<JsPattern> left) {
  left_ = std::move(left);
}

JsExpression* JsAssignmentPattern::right() {
  return right_.get();
}

const JsExpression* JsAssignmentPattern::right() const {
  return right_.get();
}

void JsAssignmentPattern::set_right(std::unique_ptr<JsExpression> right) {
  right_ = std::move(right);
}

// =============================================================================
// JsClassMethod
// =============================================================================

JsClassMethod::JsClassMethod(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::optional<std::unique_ptr<JsIdentifier>> id,
    std::vector<std::unique_ptr<JsPattern>> params,
    bool generator,
    bool async,
    std::unique_ptr<JsBlockStatement> body,
    std::unique_ptr<JsExpression> key,
    std::string kind,
    bool computed,
    bool static_)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsFunction(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols), std::move(id), std::move(params), std::move(generator), std::move(async)),
      JsBlockStatementFunction(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols), std::move(id), std::move(params), std::move(generator), std::move(async), std::move(body)),
      key_(std::move(key)),
      kind_(std::move(kind)),
      computed_(std::move(computed)),
      static__(std::move(static_)) {}

JsExpression* JsClassMethod::key() {
  return key_.get();
}

const JsExpression* JsClassMethod::key() const {
  return key_.get();
}

void JsClassMethod::set_key(std::unique_ptr<JsExpression> key) {
  key_ = std::move(key);
}

absl::string_view JsClassMethod::kind() const {
  return kind_;
}

void JsClassMethod::set_kind(std::string kind) {
  kind_ = std::move(kind);
}

bool JsClassMethod::computed() const {
  return computed_;
}

void JsClassMethod::set_computed(bool computed) {
  computed_ = computed;
}

bool JsClassMethod::static_() const {
  return static__;
}

void JsClassMethod::set_static_(bool static_) {
  static__ = static_;
}

// =============================================================================
// JsClassPrivateMethod
// =============================================================================

JsClassPrivateMethod::JsClassPrivateMethod(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::optional<std::unique_ptr<JsIdentifier>> id,
    std::vector<std::unique_ptr<JsPattern>> params,
    bool generator,
    bool async,
    std::unique_ptr<JsBlockStatement> body,
    std::unique_ptr<JsPrivateName> key,
    std::string kind,
    bool static_,
    std::optional<bool> computed)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsFunction(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols), std::move(id), std::move(params), std::move(generator), std::move(async)),
      JsBlockStatementFunction(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols), std::move(id), std::move(params), std::move(generator), std::move(async), std::move(body)),
      key_(std::move(key)),
      kind_(std::move(kind)),
      static__(std::move(static_)),
      computed_(std::move(computed)) {}

JsPrivateName* JsClassPrivateMethod::key() {
  return key_.get();
}

const JsPrivateName* JsClassPrivateMethod::key() const {
  return key_.get();
}

void JsClassPrivateMethod::set_key(std::unique_ptr<JsPrivateName> key) {
  key_ = std::move(key);
}

absl::string_view JsClassPrivateMethod::kind() const {
  return kind_;
}

void JsClassPrivateMethod::set_kind(std::string kind) {
  kind_ = std::move(kind);
}

bool JsClassPrivateMethod::static_() const {
  return static__;
}

void JsClassPrivateMethod::set_static_(bool static_) {
  static__ = static_;
}

std::optional<bool> JsClassPrivateMethod::computed() const {
  if (!computed_.has_value()) {
    return std::nullopt;
  } else {
    return computed_.value();
  }
}

void JsClassPrivateMethod::set_computed(std::optional<bool> computed) {
  computed_ = computed;
}

// =============================================================================
// JsClassProperty
// =============================================================================

JsClassProperty::JsClassProperty(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::unique_ptr<JsExpression> key,
    std::optional<std::unique_ptr<JsExpression>> value,
    bool static_,
    bool computed)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      key_(std::move(key)),
      value_(std::move(value)),
      static__(std::move(static_)),
      computed_(std::move(computed)) {}

JsExpression* JsClassProperty::key() {
  return key_.get();
}

const JsExpression* JsClassProperty::key() const {
  return key_.get();
}

void JsClassProperty::set_key(std::unique_ptr<JsExpression> key) {
  key_ = std::move(key);
}

std::optional<JsExpression*> JsClassProperty::value() {
  if (!value_.has_value()) {
    return std::nullopt;
  } else {
    return value_.value().get();
  }
}

std::optional<const JsExpression*> JsClassProperty::value() const {
  if (!value_.has_value()) {
    return std::nullopt;
  } else {
    return value_.value().get();
  }
}

void JsClassProperty::set_value(std::optional<std::unique_ptr<JsExpression>> value) {
  value_ = std::move(value);
}

bool JsClassProperty::static_() const {
  return static__;
}

void JsClassProperty::set_static_(bool static_) {
  static__ = static_;
}

bool JsClassProperty::computed() const {
  return computed_;
}

void JsClassProperty::set_computed(bool computed) {
  computed_ = computed;
}

// =============================================================================
// JsClassPrivateProperty
// =============================================================================

JsClassPrivateProperty::JsClassPrivateProperty(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::unique_ptr<JsPrivateName> key,
    std::optional<std::unique_ptr<JsExpression>> value,
    bool static_)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      key_(std::move(key)),
      value_(std::move(value)),
      static__(std::move(static_)) {}

JsPrivateName* JsClassPrivateProperty::key() {
  return key_.get();
}

const JsPrivateName* JsClassPrivateProperty::key() const {
  return key_.get();
}

void JsClassPrivateProperty::set_key(std::unique_ptr<JsPrivateName> key) {
  key_ = std::move(key);
}

std::optional<JsExpression*> JsClassPrivateProperty::value() {
  if (!value_.has_value()) {
    return std::nullopt;
  } else {
    return value_.value().get();
  }
}

std::optional<const JsExpression*> JsClassPrivateProperty::value() const {
  if (!value_.has_value()) {
    return std::nullopt;
  } else {
    return value_.value().get();
  }
}

void JsClassPrivateProperty::set_value(std::optional<std::unique_ptr<JsExpression>> value) {
  value_ = std::move(value);
}

bool JsClassPrivateProperty::static_() const {
  return static__;
}

void JsClassPrivateProperty::set_static_(bool static_) {
  static__ = static_;
}

// =============================================================================
// JsClassBody
// =============================================================================

JsClassBody::JsClassBody(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::vector<std::variant<std::unique_ptr<JsClassMethod>, std::unique_ptr<JsClassPrivateMethod>, std::unique_ptr<JsClassProperty>, std::unique_ptr<JsClassPrivateProperty>>> body)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      body_(std::move(body)) {}

std::vector<std::variant<std::unique_ptr<JsClassMethod>, std::unique_ptr<JsClassPrivateMethod>, std::unique_ptr<JsClassProperty>, std::unique_ptr<JsClassPrivateProperty>>>* JsClassBody::body() {
  return &body_;
}

const std::vector<std::variant<std::unique_ptr<JsClassMethod>, std::unique_ptr<JsClassPrivateMethod>, std::unique_ptr<JsClassProperty>, std::unique_ptr<JsClassPrivateProperty>>>* JsClassBody::body() const {
  return &body_;
}

void JsClassBody::set_body(std::vector<std::variant<std::unique_ptr<JsClassMethod>, std::unique_ptr<JsClassPrivateMethod>, std::unique_ptr<JsClassProperty>, std::unique_ptr<JsClassPrivateProperty>>> body) {
  body_ = std::move(body);
}

// =============================================================================
// JsClass
// =============================================================================

JsClass::JsClass(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::optional<std::unique_ptr<JsExpression>> super_class,
    std::unique_ptr<JsClassBody> body)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      super_class_(std::move(super_class)),
      body_(std::move(body)) {}

std::optional<JsExpression*> JsClass::super_class() {
  if (!super_class_.has_value()) {
    return std::nullopt;
  } else {
    return super_class_.value().get();
  }
}

std::optional<const JsExpression*> JsClass::super_class() const {
  if (!super_class_.has_value()) {
    return std::nullopt;
  } else {
    return super_class_.value().get();
  }
}

void JsClass::set_super_class(std::optional<std::unique_ptr<JsExpression>> super_class) {
  super_class_ = std::move(super_class);
}

JsClassBody* JsClass::body() {
  return body_.get();
}

const JsClassBody* JsClass::body() const {
  return body_.get();
}

void JsClass::set_body(std::unique_ptr<JsClassBody> body) {
  body_ = std::move(body);
}

// =============================================================================
// JsClassDeclaration
// =============================================================================

JsClassDeclaration::JsClassDeclaration(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::optional<std::unique_ptr<JsExpression>> super_class,
    std::unique_ptr<JsClassBody> body,
    std::optional<std::unique_ptr<JsIdentifier>> id)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsClass(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols), std::move(super_class), std::move(body)),
      JsStatement(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsDeclaration(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      id_(std::move(id)) {}

std::optional<JsIdentifier*> JsClassDeclaration::id() {
  if (!id_.has_value()) {
    return std::nullopt;
  } else {
    return id_.value().get();
  }
}

std::optional<const JsIdentifier*> JsClassDeclaration::id() const {
  if (!id_.has_value()) {
    return std::nullopt;
  } else {
    return id_.value().get();
  }
}

void JsClassDeclaration::set_id(std::optional<std::unique_ptr<JsIdentifier>> id) {
  id_ = std::move(id);
}

// =============================================================================
// JsClassExpression
// =============================================================================

JsClassExpression::JsClassExpression(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::optional<std::unique_ptr<JsExpression>> super_class,
    std::unique_ptr<JsClassBody> body,
    std::optional<std::unique_ptr<JsIdentifier>> id)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsClass(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols), std::move(super_class), std::move(body)),
      JsExpression(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      id_(std::move(id)) {}

std::optional<JsIdentifier*> JsClassExpression::id() {
  if (!id_.has_value()) {
    return std::nullopt;
  } else {
    return id_.value().get();
  }
}

std::optional<const JsIdentifier*> JsClassExpression::id() const {
  if (!id_.has_value()) {
    return std::nullopt;
  } else {
    return id_.value().get();
  }
}

void JsClassExpression::set_id(std::optional<std::unique_ptr<JsIdentifier>> id) {
  id_ = std::move(id);
}

// =============================================================================
// JsMetaProperty
// =============================================================================

JsMetaProperty::JsMetaProperty(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::unique_ptr<JsIdentifier> meta,
    std::unique_ptr<JsIdentifier> property)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsExpression(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      meta_(std::move(meta)),
      property_(std::move(property)) {}

JsIdentifier* JsMetaProperty::meta() {
  return meta_.get();
}

const JsIdentifier* JsMetaProperty::meta() const {
  return meta_.get();
}

void JsMetaProperty::set_meta(std::unique_ptr<JsIdentifier> meta) {
  meta_ = std::move(meta);
}

JsIdentifier* JsMetaProperty::property() {
  return property_.get();
}

const JsIdentifier* JsMetaProperty::property() const {
  return property_.get();
}

void JsMetaProperty::set_property(std::unique_ptr<JsIdentifier> property) {
  property_ = std::move(property);
}

// =============================================================================
// JsModuleSpecifier
// =============================================================================

JsModuleSpecifier::JsModuleSpecifier(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)) {}

// =============================================================================
// JsImportSpecifier
// =============================================================================

JsImportSpecifier::JsImportSpecifier(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::variant<std::unique_ptr<JsIdentifier>, std::unique_ptr<JsStringLiteral>> imported,
    std::unique_ptr<JsIdentifier> local)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsModuleSpecifier(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      imported_(std::move(imported)),
      local_(std::move(local)) {}

std::variant<JsIdentifier*, JsStringLiteral*> JsImportSpecifier::imported() {
  switch (imported_.index()) {
    case 0: {
      return std::get<0>(imported_).get();
    }
    case 1: {
      return std::get<1>(imported_).get();
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
}

std::variant<const JsIdentifier*, const JsStringLiteral*> JsImportSpecifier::imported() const {
  switch (imported_.index()) {
    case 0: {
      return std::get<0>(imported_).get();
    }
    case 1: {
      return std::get<1>(imported_).get();
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
}

void JsImportSpecifier::set_imported(std::variant<std::unique_ptr<JsIdentifier>, std::unique_ptr<JsStringLiteral>> imported) {
  imported_ = std::move(imported);
}

JsIdentifier* JsImportSpecifier::local() {
  return local_.get();
}

const JsIdentifier* JsImportSpecifier::local() const {
  return local_.get();
}

void JsImportSpecifier::set_local(std::unique_ptr<JsIdentifier> local) {
  local_ = std::move(local);
}

// =============================================================================
// JsImportDefaultSpecifier
// =============================================================================

JsImportDefaultSpecifier::JsImportDefaultSpecifier(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::unique_ptr<JsIdentifier> local)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsModuleSpecifier(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      local_(std::move(local)) {}

JsIdentifier* JsImportDefaultSpecifier::local() {
  return local_.get();
}

const JsIdentifier* JsImportDefaultSpecifier::local() const {
  return local_.get();
}

void JsImportDefaultSpecifier::set_local(std::unique_ptr<JsIdentifier> local) {
  local_ = std::move(local);
}

// =============================================================================
// JsImportNamespaceSpecifier
// =============================================================================

JsImportNamespaceSpecifier::JsImportNamespaceSpecifier(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::unique_ptr<JsIdentifier> local)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsModuleSpecifier(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      local_(std::move(local)) {}

JsIdentifier* JsImportNamespaceSpecifier::local() {
  return local_.get();
}

const JsIdentifier* JsImportNamespaceSpecifier::local() const {
  return local_.get();
}

void JsImportNamespaceSpecifier::set_local(std::unique_ptr<JsIdentifier> local) {
  local_ = std::move(local);
}

// =============================================================================
// JsImportAttribute
// =============================================================================

JsImportAttribute::JsImportAttribute(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::unique_ptr<JsIdentifier> key,
    std::unique_ptr<JsStringLiteral> value)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      key_(std::move(key)),
      value_(std::move(value)) {}

JsIdentifier* JsImportAttribute::key() {
  return key_.get();
}

const JsIdentifier* JsImportAttribute::key() const {
  return key_.get();
}

void JsImportAttribute::set_key(std::unique_ptr<JsIdentifier> key) {
  key_ = std::move(key);
}

JsStringLiteral* JsImportAttribute::value() {
  return value_.get();
}

const JsStringLiteral* JsImportAttribute::value() const {
  return value_.get();
}

void JsImportAttribute::set_value(std::unique_ptr<JsStringLiteral> value) {
  value_ = std::move(value);
}

// =============================================================================
// JsImportDeclaration
// =============================================================================

JsImportDeclaration::JsImportDeclaration(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::vector<std::variant<std::unique_ptr<JsImportSpecifier>, std::unique_ptr<JsImportDefaultSpecifier>, std::unique_ptr<JsImportNamespaceSpecifier>>> specifiers,
    std::unique_ptr<JsStringLiteral> source,
    std::optional<std::unique_ptr<JsImportAttribute>> assertions)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsModuleDeclaration(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      specifiers_(std::move(specifiers)),
      source_(std::move(source)),
      assertions_(std::move(assertions)) {}

std::vector<std::variant<std::unique_ptr<JsImportSpecifier>, std::unique_ptr<JsImportDefaultSpecifier>, std::unique_ptr<JsImportNamespaceSpecifier>>>* JsImportDeclaration::specifiers() {
  return &specifiers_;
}

const std::vector<std::variant<std::unique_ptr<JsImportSpecifier>, std::unique_ptr<JsImportDefaultSpecifier>, std::unique_ptr<JsImportNamespaceSpecifier>>>* JsImportDeclaration::specifiers() const {
  return &specifiers_;
}

void JsImportDeclaration::set_specifiers(std::vector<std::variant<std::unique_ptr<JsImportSpecifier>, std::unique_ptr<JsImportDefaultSpecifier>, std::unique_ptr<JsImportNamespaceSpecifier>>> specifiers) {
  specifiers_ = std::move(specifiers);
}

JsStringLiteral* JsImportDeclaration::source() {
  return source_.get();
}

const JsStringLiteral* JsImportDeclaration::source() const {
  return source_.get();
}

void JsImportDeclaration::set_source(std::unique_ptr<JsStringLiteral> source) {
  source_ = std::move(source);
}

std::optional<JsImportAttribute*> JsImportDeclaration::assertions() {
  if (!assertions_.has_value()) {
    return std::nullopt;
  } else {
    return assertions_.value().get();
  }
}

std::optional<const JsImportAttribute*> JsImportDeclaration::assertions() const {
  if (!assertions_.has_value()) {
    return std::nullopt;
  } else {
    return assertions_.value().get();
  }
}

void JsImportDeclaration::set_assertions(std::optional<std::unique_ptr<JsImportAttribute>> assertions) {
  assertions_ = std::move(assertions);
}

// =============================================================================
// JsExportSpecifier
// =============================================================================

JsExportSpecifier::JsExportSpecifier(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::variant<std::unique_ptr<JsIdentifier>, std::unique_ptr<JsStringLiteral>> exported,
    std::optional<std::variant<std::unique_ptr<JsIdentifier>, std::unique_ptr<JsStringLiteral>>> local)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsModuleSpecifier(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      exported_(std::move(exported)),
      local_(std::move(local)) {}

std::variant<JsIdentifier*, JsStringLiteral*> JsExportSpecifier::exported() {
  switch (exported_.index()) {
    case 0: {
      return std::get<0>(exported_).get();
    }
    case 1: {
      return std::get<1>(exported_).get();
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
}

std::variant<const JsIdentifier*, const JsStringLiteral*> JsExportSpecifier::exported() const {
  switch (exported_.index()) {
    case 0: {
      return std::get<0>(exported_).get();
    }
    case 1: {
      return std::get<1>(exported_).get();
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
}

void JsExportSpecifier::set_exported(std::variant<std::unique_ptr<JsIdentifier>, std::unique_ptr<JsStringLiteral>> exported) {
  exported_ = std::move(exported);
}

std::optional<std::variant<JsIdentifier*, JsStringLiteral*>> JsExportSpecifier::local() {
  if (!local_.has_value()) {
    return std::nullopt;
  } else {
    switch (local_.value().index()) {
      case 0: {
        return std::get<0>(local_.value()).get();
      }
      case 1: {
        return std::get<1>(local_.value()).get();
      }
      default:
        LOG(FATAL) << "Unreachable code.";
    }
  }
}

std::optional<std::variant<const JsIdentifier*, const JsStringLiteral*>> JsExportSpecifier::local() const {
  if (!local_.has_value()) {
    return std::nullopt;
  } else {
    switch (local_.value().index()) {
      case 0: {
        return std::get<0>(local_.value()).get();
      }
      case 1: {
        return std::get<1>(local_.value()).get();
      }
      default:
        LOG(FATAL) << "Unreachable code.";
    }
  }
}

void JsExportSpecifier::set_local(std::optional<std::variant<std::unique_ptr<JsIdentifier>, std::unique_ptr<JsStringLiteral>>> local) {
  local_ = std::move(local);
}

// =============================================================================
// JsExportNamedDeclaration
// =============================================================================

JsExportNamedDeclaration::JsExportNamedDeclaration(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::optional<std::unique_ptr<JsDeclaration>> declaration,
    std::vector<std::unique_ptr<JsExportSpecifier>> specifiers,
    std::optional<std::unique_ptr<JsStringLiteral>> source,
    std::optional<std::vector<std::unique_ptr<JsImportAttribute>>> assertions)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsModuleDeclaration(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      declaration_(std::move(declaration)),
      specifiers_(std::move(specifiers)),
      source_(std::move(source)),
      assertions_(std::move(assertions)) {}

std::optional<JsDeclaration*> JsExportNamedDeclaration::declaration() {
  if (!declaration_.has_value()) {
    return std::nullopt;
  } else {
    return declaration_.value().get();
  }
}

std::optional<const JsDeclaration*> JsExportNamedDeclaration::declaration() const {
  if (!declaration_.has_value()) {
    return std::nullopt;
  } else {
    return declaration_.value().get();
  }
}

void JsExportNamedDeclaration::set_declaration(std::optional<std::unique_ptr<JsDeclaration>> declaration) {
  declaration_ = std::move(declaration);
}

std::vector<std::unique_ptr<JsExportSpecifier>>* JsExportNamedDeclaration::specifiers() {
  return &specifiers_;
}

const std::vector<std::unique_ptr<JsExportSpecifier>>* JsExportNamedDeclaration::specifiers() const {
  return &specifiers_;
}

void JsExportNamedDeclaration::set_specifiers(std::vector<std::unique_ptr<JsExportSpecifier>> specifiers) {
  specifiers_ = std::move(specifiers);
}

std::optional<JsStringLiteral*> JsExportNamedDeclaration::source() {
  if (!source_.has_value()) {
    return std::nullopt;
  } else {
    return source_.value().get();
  }
}

std::optional<const JsStringLiteral*> JsExportNamedDeclaration::source() const {
  if (!source_.has_value()) {
    return std::nullopt;
  } else {
    return source_.value().get();
  }
}

void JsExportNamedDeclaration::set_source(std::optional<std::unique_ptr<JsStringLiteral>> source) {
  source_ = std::move(source);
}

std::optional<std::vector<std::unique_ptr<JsImportAttribute>>*> JsExportNamedDeclaration::assertions() {
  if (!assertions_.has_value()) {
    return std::nullopt;
  } else {
    return &assertions_.value();
  }
}

std::optional<const std::vector<std::unique_ptr<JsImportAttribute>>*> JsExportNamedDeclaration::assertions() const {
  if (!assertions_.has_value()) {
    return std::nullopt;
  } else {
    return &assertions_.value();
  }
}

void JsExportNamedDeclaration::set_assertions(std::optional<std::vector<std::unique_ptr<JsImportAttribute>>> assertions) {
  assertions_ = std::move(assertions);
}

// =============================================================================
// JsExportDefaultDeclaration
// =============================================================================

JsExportDefaultDeclaration::JsExportDefaultDeclaration(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::variant<std::unique_ptr<JsFunctionDeclaration>, std::unique_ptr<JsClassDeclaration>, std::unique_ptr<JsExpression>> declaration)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsModuleDeclaration(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      declaration_(std::move(declaration)) {}

std::variant<JsFunctionDeclaration*, JsClassDeclaration*, JsExpression*> JsExportDefaultDeclaration::declaration() {
  switch (declaration_.index()) {
    case 0: {
      return std::get<0>(declaration_).get();
    }
    case 1: {
      return std::get<1>(declaration_).get();
    }
    case 2: {
      return std::get<2>(declaration_).get();
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
}

std::variant<const JsFunctionDeclaration*, const JsClassDeclaration*, const JsExpression*> JsExportDefaultDeclaration::declaration() const {
  switch (declaration_.index()) {
    case 0: {
      return std::get<0>(declaration_).get();
    }
    case 1: {
      return std::get<1>(declaration_).get();
    }
    case 2: {
      return std::get<2>(declaration_).get();
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
}

void JsExportDefaultDeclaration::set_declaration(std::variant<std::unique_ptr<JsFunctionDeclaration>, std::unique_ptr<JsClassDeclaration>, std::unique_ptr<JsExpression>> declaration) {
  declaration_ = std::move(declaration);
}

// =============================================================================
// JsExportAllDeclaration
// =============================================================================

JsExportAllDeclaration::JsExportAllDeclaration(
    std::optional<std::unique_ptr<JsSourceLocation>> loc,
    std::optional<int64_t> start,
    std::optional<int64_t> end,
    std::optional<std::vector<std::unique_ptr<JsComment>>> leading_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> trailing_comments,
    std::optional<std::vector<std::unique_ptr<JsComment>>> inner_comments,
    std::optional<int64_t> scope_uid,
    std::optional<std::unique_ptr<JsSymbolId>> referenced_symbol,
    std::optional<std::vector<std::unique_ptr<JsSymbolId>>> defined_symbols,
    std::unique_ptr<JsStringLiteral> source,
    std::optional<std::vector<std::unique_ptr<JsImportAttribute>>> assertions)
    : JsNode(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      JsModuleDeclaration(std::move(loc), std::move(start), std::move(end), std::move(leading_comments), std::move(trailing_comments), std::move(inner_comments), std::move(scope_uid), std::move(referenced_symbol), std::move(defined_symbols)),
      source_(std::move(source)),
      assertions_(std::move(assertions)) {}

JsStringLiteral* JsExportAllDeclaration::source() {
  return source_.get();
}

const JsStringLiteral* JsExportAllDeclaration::source() const {
  return source_.get();
}

void JsExportAllDeclaration::set_source(std::unique_ptr<JsStringLiteral> source) {
  source_ = std::move(source);
}

std::optional<std::vector<std::unique_ptr<JsImportAttribute>>*> JsExportAllDeclaration::assertions() {
  if (!assertions_.has_value()) {
    return std::nullopt;
  } else {
    return &assertions_.value();
  }
}

std::optional<const std::vector<std::unique_ptr<JsImportAttribute>>*> JsExportAllDeclaration::assertions() const {
  if (!assertions_.has_value()) {
    return std::nullopt;
  } else {
    return &assertions_.value();
  }
}

void JsExportAllDeclaration::set_assertions(std::optional<std::vector<std::unique_ptr<JsImportAttribute>>> assertions) {
  assertions_ = std::move(assertions);
}

// clang-format on
// NOLINTEND(whitespace/line_length)
// IWYU pragma: end_keep

}  // namespace maldoca
