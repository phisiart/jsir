// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// =============================================================================
// STOP!! DO NOT MODIFY!! THIS FILE IS AUTOMATICALLY GENERATED.
// =============================================================================

// IWYU pragma: begin_keep
// NOLINTBEGIN(whitespace/line_length)
// clang-format off

#include <cmath>
#include <limits>
#include <ostream>
#include <string>
#include <utility>

#include "absl/log/log.h"
#include "absl/memory/memory.h"
#include "absl/status/status.h"
#include "absl/strings/string_view.h"
#include "nlohmann/json.hpp"
#include "maldoca/base/status_macros.h"
#include "maldoca/js/ast/ast.generated.h"

namespace maldoca {

void MaybeAddComma(std::ostream &os, bool &needs_comma) {
  if (needs_comma) {
    os << ",";
  }
  needs_comma = true;
}

// =============================================================================
// JsPosition
// =============================================================================

void JsPosition::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"line\":" << (nlohmann::json(line_)).dump();
  MaybeAddComma(os, needs_comma);
  os << "\"column\":" << (nlohmann::json(column_)).dump();
}

void JsPosition::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    JsPosition::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsSourceLocation
// =============================================================================

void JsSourceLocation::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"start\":";
  start_->Serialize(os);
  MaybeAddComma(os, needs_comma);
  os << "\"end\":";
  end_->Serialize(os);
  if (identifier_name_.has_value()) {
    MaybeAddComma(os, needs_comma);
    os << "\"identifierName\":" << (nlohmann::json(identifier_name_.value())).dump();
  }
}

void JsSourceLocation::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    JsSourceLocation::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsComment
// =============================================================================

void JsComment::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"loc\":";
  loc_->Serialize(os);
  MaybeAddComma(os, needs_comma);
  os << "\"value\":" << (nlohmann::json(value_)).dump();
  MaybeAddComma(os, needs_comma);
  os << "\"start\":" << (nlohmann::json(start_)).dump();
  MaybeAddComma(os, needs_comma);
  os << "\"end\":" << (nlohmann::json(end_)).dump();
}

// =============================================================================
// JsCommentBlock
// =============================================================================

void JsCommentBlock::SerializeFields(std::ostream& os, bool &needs_comma) const {
}

void JsCommentBlock::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"CommentBlock\"";
    JsComment::SerializeFields(os, needs_comma);
    JsCommentBlock::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsCommentLine
// =============================================================================

void JsCommentLine::SerializeFields(std::ostream& os, bool &needs_comma) const {
}

void JsCommentLine::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"CommentLine\"";
    JsComment::SerializeFields(os, needs_comma);
    JsCommentLine::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsSymbolId
// =============================================================================

void JsSymbolId::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"name\":" << (nlohmann::json(name_)).dump();
  if (def_scope_uid_.has_value()) {
    MaybeAddComma(os, needs_comma);
    os << "\"defScopeUid\":" << (nlohmann::json(def_scope_uid_.value())).dump();
  }
}

void JsSymbolId::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    JsSymbolId::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsNode
// =============================================================================

void JsNode::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  if (loc_.has_value()) {
    os << "\"loc\":";
    loc_.value()->Serialize(os);
  } else {
    os << "\"loc\":" << "null";
  }
  MaybeAddComma(os, needs_comma);
  if (start_.has_value()) {
    os << "\"start\":" << (nlohmann::json(start_.value())).dump();
  } else {
    os << "\"start\":" << "null";
  }
  MaybeAddComma(os, needs_comma);
  if (end_.has_value()) {
    os << "\"end\":" << (nlohmann::json(end_.value())).dump();
  } else {
    os << "\"end\":" << "null";
  }
  if (leading_comments_.has_value()) {
    MaybeAddComma(os, needs_comma);
    os << "\"leadingComments\":" << "[";
    {
      bool needs_comma = false;
      for (const auto& element : leading_comments_.value()) {
        MaybeAddComma(os, needs_comma);
        element->Serialize(os);
      }
    }
    os << "]";
  }
  if (trailing_comments_.has_value()) {
    MaybeAddComma(os, needs_comma);
    os << "\"trailingComments\":" << "[";
    {
      bool needs_comma = false;
      for (const auto& element : trailing_comments_.value()) {
        MaybeAddComma(os, needs_comma);
        element->Serialize(os);
      }
    }
    os << "]";
  }
  if (inner_comments_.has_value()) {
    MaybeAddComma(os, needs_comma);
    os << "\"innerComments\":" << "[";
    {
      bool needs_comma = false;
      for (const auto& element : inner_comments_.value()) {
        MaybeAddComma(os, needs_comma);
        element->Serialize(os);
      }
    }
    os << "]";
  }
  if (scope_uid_.has_value()) {
    MaybeAddComma(os, needs_comma);
    os << "\"scopeUid\":" << (nlohmann::json(scope_uid_.value())).dump();
  }
  if (referenced_symbol_.has_value()) {
    MaybeAddComma(os, needs_comma);
    os << "\"referencedSymbol\":";
    referenced_symbol_.value()->Serialize(os);
  }
  if (defined_symbols_.has_value()) {
    MaybeAddComma(os, needs_comma);
    os << "\"definedSymbols\":" << "[";
    {
      bool needs_comma = false;
      for (const auto& element : defined_symbols_.value()) {
        MaybeAddComma(os, needs_comma);
        element->Serialize(os);
      }
    }
    os << "]";
  }
}

// =============================================================================
// JsInterpreterDirective
// =============================================================================

void JsInterpreterDirective::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"value\":" << (nlohmann::json(value_)).dump();
}

void JsInterpreterDirective::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"InterpreterDirective\"";
    JsNode::SerializeFields(os, needs_comma);
    JsInterpreterDirective::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsStatement
// =============================================================================

void JsStatement::SerializeFields(std::ostream& os, bool &needs_comma) const {
}

// =============================================================================
// JsModuleDeclaration
// =============================================================================

void JsModuleDeclaration::SerializeFields(std::ostream& os, bool &needs_comma) const {
}

// =============================================================================
// JsDirectiveLiteralExtra
// =============================================================================

void JsDirectiveLiteralExtra::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"raw\":" << (nlohmann::json(raw_)).dump();
  MaybeAddComma(os, needs_comma);
  os << "\"rawValue\":" << (nlohmann::json(raw_value_)).dump();
}

void JsDirectiveLiteralExtra::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    JsDirectiveLiteralExtra::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsDirectiveLiteral
// =============================================================================

void JsDirectiveLiteral::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"value\":" << (nlohmann::json(value_)).dump();
  if (extra_.has_value()) {
    MaybeAddComma(os, needs_comma);
    os << "\"extra\":";
    extra_.value()->Serialize(os);
  }
}

void JsDirectiveLiteral::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"DirectiveLiteral\"";
    JsNode::SerializeFields(os, needs_comma);
    JsDirectiveLiteral::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsDirective
// =============================================================================

void JsDirective::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"value\":";
  value_->Serialize(os);
}

void JsDirective::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"Directive\"";
    JsNode::SerializeFields(os, needs_comma);
    JsDirective::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsProgram
// =============================================================================

void JsProgram::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  if (interpreter_.has_value()) {
    os << "\"interpreter\":";
    interpreter_.value()->Serialize(os);
  } else {
    os << "\"interpreter\":" << "null";
  }
  MaybeAddComma(os, needs_comma);
  os << "\"sourceType\":" << (nlohmann::json(source_type_)).dump();
  MaybeAddComma(os, needs_comma);
  os << "\"body\":" << "[";
  {
    bool needs_comma = false;
    for (const auto& element : body_) {
      MaybeAddComma(os, needs_comma);
      switch (element.index()) {
        case 0: {
          std::get<0>(element)->Serialize(os);
          break;
        }
        case 1: {
          std::get<1>(element)->Serialize(os);
          break;
        }
        default:
          LOG(FATAL) << "Unreachable code.";
      }
    }
  }
  os << "]";
  MaybeAddComma(os, needs_comma);
  os << "\"directives\":" << "[";
  {
    bool needs_comma = false;
    for (const auto& element : directives_) {
      MaybeAddComma(os, needs_comma);
      element->Serialize(os);
    }
  }
  os << "]";
}

void JsProgram::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"Program\"";
    JsNode::SerializeFields(os, needs_comma);
    JsProgram::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsFile
// =============================================================================

void JsFile::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"program\":";
  program_->Serialize(os);
}

void JsFile::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"File\"";
    JsNode::SerializeFields(os, needs_comma);
    JsFile::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsExpression
// =============================================================================

void JsExpression::SerializeFields(std::ostream& os, bool &needs_comma) const {
}

// =============================================================================
// JsPattern
// =============================================================================

void JsPattern::SerializeFields(std::ostream& os, bool &needs_comma) const {
}

// =============================================================================
// JsLVal
// =============================================================================

void JsLVal::SerializeFields(std::ostream& os, bool &needs_comma) const {
}

// =============================================================================
// JsIdentifier
// =============================================================================

void JsIdentifier::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"name\":" << (nlohmann::json(name_)).dump();
}

void JsIdentifier::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"Identifier\"";
    JsNode::SerializeFields(os, needs_comma);
    JsExpression::SerializeFields(os, needs_comma);
    JsPattern::SerializeFields(os, needs_comma);
    JsLVal::SerializeFields(os, needs_comma);
    JsIdentifier::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsPrivateName
// =============================================================================

void JsPrivateName::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"id\":";
  id_->Serialize(os);
}

void JsPrivateName::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"PrivateName\"";
    JsNode::SerializeFields(os, needs_comma);
    JsPrivateName::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsLiteral
// =============================================================================

void JsLiteral::SerializeFields(std::ostream& os, bool &needs_comma) const {
}

// =============================================================================
// JsRegExpLiteralExtra
// =============================================================================

void JsRegExpLiteralExtra::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"raw\":" << (nlohmann::json(raw_)).dump();
}

void JsRegExpLiteralExtra::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    JsRegExpLiteralExtra::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsRegExpLiteral
// =============================================================================

void JsRegExpLiteral::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"pattern\":" << (nlohmann::json(pattern_)).dump();
  MaybeAddComma(os, needs_comma);
  os << "\"flags\":" << (nlohmann::json(flags_)).dump();
  if (extra_.has_value()) {
    MaybeAddComma(os, needs_comma);
    os << "\"extra\":";
    extra_.value()->Serialize(os);
  }
}

void JsRegExpLiteral::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"RegExpLiteral\"";
    JsNode::SerializeFields(os, needs_comma);
    JsExpression::SerializeFields(os, needs_comma);
    JsLiteral::SerializeFields(os, needs_comma);
    JsRegExpLiteral::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsNullLiteral
// =============================================================================

void JsNullLiteral::SerializeFields(std::ostream& os, bool &needs_comma) const {
}

void JsNullLiteral::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"NullLiteral\"";
    JsNode::SerializeFields(os, needs_comma);
    JsExpression::SerializeFields(os, needs_comma);
    JsLiteral::SerializeFields(os, needs_comma);
    JsNullLiteral::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsStringLiteralExtra
// =============================================================================

void JsStringLiteralExtra::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"raw\":" << (nlohmann::json(raw_)).dump();
  MaybeAddComma(os, needs_comma);
  os << "\"rawValue\":" << (nlohmann::json(raw_value_)).dump();
}

void JsStringLiteralExtra::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    JsStringLiteralExtra::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsStringLiteral
// =============================================================================

void JsStringLiteral::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"value\":" << (nlohmann::json(value_)).dump();
  if (extra_.has_value()) {
    MaybeAddComma(os, needs_comma);
    os << "\"extra\":";
    extra_.value()->Serialize(os);
  }
}

void JsStringLiteral::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"StringLiteral\"";
    JsNode::SerializeFields(os, needs_comma);
    JsExpression::SerializeFields(os, needs_comma);
    JsLiteral::SerializeFields(os, needs_comma);
    JsStringLiteral::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsBooleanLiteral
// =============================================================================

void JsBooleanLiteral::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"value\":" << (nlohmann::json(value_)).dump();
}

void JsBooleanLiteral::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"BooleanLiteral\"";
    JsNode::SerializeFields(os, needs_comma);
    JsExpression::SerializeFields(os, needs_comma);
    JsLiteral::SerializeFields(os, needs_comma);
    JsBooleanLiteral::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsNumericLiteralExtra
// =============================================================================

void JsNumericLiteralExtra::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"raw\":" << (nlohmann::json(raw_)).dump();
  MaybeAddComma(os, needs_comma);
  os << "\"rawValue\":" << (nlohmann::json(raw_value_)).dump();
}

void JsNumericLiteralExtra::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    JsNumericLiteralExtra::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsNumericLiteral
// =============================================================================

void JsNumericLiteral::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"value\":" << (nlohmann::json(value_)).dump();
  if (extra_.has_value()) {
    MaybeAddComma(os, needs_comma);
    os << "\"extra\":";
    extra_.value()->Serialize(os);
  }
}

void JsNumericLiteral::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"NumericLiteral\"";
    JsNode::SerializeFields(os, needs_comma);
    JsExpression::SerializeFields(os, needs_comma);
    JsLiteral::SerializeFields(os, needs_comma);
    JsNumericLiteral::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsBigIntLiteralExtra
// =============================================================================

void JsBigIntLiteralExtra::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"raw\":" << (nlohmann::json(raw_)).dump();
  MaybeAddComma(os, needs_comma);
  os << "\"rawValue\":" << (nlohmann::json(raw_value_)).dump();
}

void JsBigIntLiteralExtra::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    JsBigIntLiteralExtra::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsBigIntLiteral
// =============================================================================

void JsBigIntLiteral::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"value\":" << (nlohmann::json(value_)).dump();
  if (extra_.has_value()) {
    MaybeAddComma(os, needs_comma);
    os << "\"extra\":";
    extra_.value()->Serialize(os);
  }
}

void JsBigIntLiteral::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"BigIntLiteral\"";
    JsNode::SerializeFields(os, needs_comma);
    JsExpression::SerializeFields(os, needs_comma);
    JsLiteral::SerializeFields(os, needs_comma);
    JsBigIntLiteral::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsFunction
// =============================================================================

void JsFunction::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  if (id_.has_value()) {
    os << "\"id\":";
    id_.value()->Serialize(os);
  } else {
    os << "\"id\":" << "null";
  }
  MaybeAddComma(os, needs_comma);
  os << "\"params\":" << "[";
  {
    bool needs_comma = false;
    for (const auto& element : params_) {
      MaybeAddComma(os, needs_comma);
      element->Serialize(os);
    }
  }
  os << "]";
  MaybeAddComma(os, needs_comma);
  os << "\"generator\":" << (nlohmann::json(generator_)).dump();
  MaybeAddComma(os, needs_comma);
  os << "\"async\":" << (nlohmann::json(async_)).dump();
}

// =============================================================================
// JsBlockStatement
// =============================================================================

void JsBlockStatement::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"body\":" << "[";
  {
    bool needs_comma = false;
    for (const auto& element : body_) {
      MaybeAddComma(os, needs_comma);
      element->Serialize(os);
    }
  }
  os << "]";
  MaybeAddComma(os, needs_comma);
  os << "\"directives\":" << "[";
  {
    bool needs_comma = false;
    for (const auto& element : directives_) {
      MaybeAddComma(os, needs_comma);
      element->Serialize(os);
    }
  }
  os << "]";
}

void JsBlockStatement::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"BlockStatement\"";
    JsNode::SerializeFields(os, needs_comma);
    JsStatement::SerializeFields(os, needs_comma);
    JsBlockStatement::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsBlockStatementFunction
// =============================================================================

void JsBlockStatementFunction::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"body\":";
  body_->Serialize(os);
}

// =============================================================================
// JsExpressionStatement
// =============================================================================

void JsExpressionStatement::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"expression\":";
  expression_->Serialize(os);
}

void JsExpressionStatement::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"ExpressionStatement\"";
    JsNode::SerializeFields(os, needs_comma);
    JsStatement::SerializeFields(os, needs_comma);
    JsExpressionStatement::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsEmptyStatement
// =============================================================================

void JsEmptyStatement::SerializeFields(std::ostream& os, bool &needs_comma) const {
}

void JsEmptyStatement::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"EmptyStatement\"";
    JsNode::SerializeFields(os, needs_comma);
    JsStatement::SerializeFields(os, needs_comma);
    JsEmptyStatement::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsDebuggerStatement
// =============================================================================

void JsDebuggerStatement::SerializeFields(std::ostream& os, bool &needs_comma) const {
}

void JsDebuggerStatement::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"DebuggerStatement\"";
    JsNode::SerializeFields(os, needs_comma);
    JsStatement::SerializeFields(os, needs_comma);
    JsDebuggerStatement::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsWithStatement
// =============================================================================

void JsWithStatement::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"object\":";
  object_->Serialize(os);
  MaybeAddComma(os, needs_comma);
  os << "\"body\":";
  body_->Serialize(os);
}

void JsWithStatement::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"WithStatement\"";
    JsNode::SerializeFields(os, needs_comma);
    JsStatement::SerializeFields(os, needs_comma);
    JsWithStatement::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsReturnStatement
// =============================================================================

void JsReturnStatement::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  if (argument_.has_value()) {
    os << "\"argument\":";
    argument_.value()->Serialize(os);
  } else {
    os << "\"argument\":" << "null";
  }
}

void JsReturnStatement::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"ReturnStatement\"";
    JsNode::SerializeFields(os, needs_comma);
    JsStatement::SerializeFields(os, needs_comma);
    JsReturnStatement::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsLabeledStatement
// =============================================================================

void JsLabeledStatement::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"label\":";
  label_->Serialize(os);
  MaybeAddComma(os, needs_comma);
  os << "\"body\":";
  body_->Serialize(os);
}

void JsLabeledStatement::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"LabeledStatement\"";
    JsNode::SerializeFields(os, needs_comma);
    JsStatement::SerializeFields(os, needs_comma);
    JsLabeledStatement::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsBreakStatement
// =============================================================================

void JsBreakStatement::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  if (label_.has_value()) {
    os << "\"label\":";
    label_.value()->Serialize(os);
  } else {
    os << "\"label\":" << "null";
  }
}

void JsBreakStatement::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"BreakStatement\"";
    JsNode::SerializeFields(os, needs_comma);
    JsStatement::SerializeFields(os, needs_comma);
    JsBreakStatement::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsContinueStatement
// =============================================================================

void JsContinueStatement::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  if (label_.has_value()) {
    os << "\"label\":";
    label_.value()->Serialize(os);
  } else {
    os << "\"label\":" << "null";
  }
}

void JsContinueStatement::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"ContinueStatement\"";
    JsNode::SerializeFields(os, needs_comma);
    JsStatement::SerializeFields(os, needs_comma);
    JsContinueStatement::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsIfStatement
// =============================================================================

void JsIfStatement::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"test\":";
  test_->Serialize(os);
  MaybeAddComma(os, needs_comma);
  os << "\"consequent\":";
  consequent_->Serialize(os);
  MaybeAddComma(os, needs_comma);
  if (alternate_.has_value()) {
    os << "\"alternate\":";
    alternate_.value()->Serialize(os);
  } else {
    os << "\"alternate\":" << "null";
  }
}

void JsIfStatement::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"IfStatement\"";
    JsNode::SerializeFields(os, needs_comma);
    JsStatement::SerializeFields(os, needs_comma);
    JsIfStatement::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsSwitchCase
// =============================================================================

void JsSwitchCase::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  if (test_.has_value()) {
    os << "\"test\":";
    test_.value()->Serialize(os);
  } else {
    os << "\"test\":" << "null";
  }
  MaybeAddComma(os, needs_comma);
  os << "\"consequent\":" << "[";
  {
    bool needs_comma = false;
    for (const auto& element : consequent_) {
      MaybeAddComma(os, needs_comma);
      element->Serialize(os);
    }
  }
  os << "]";
}

void JsSwitchCase::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"SwitchCase\"";
    JsNode::SerializeFields(os, needs_comma);
    JsSwitchCase::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsSwitchStatement
// =============================================================================

void JsSwitchStatement::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"discriminant\":";
  discriminant_->Serialize(os);
  MaybeAddComma(os, needs_comma);
  os << "\"cases\":" << "[";
  {
    bool needs_comma = false;
    for (const auto& element : cases_) {
      MaybeAddComma(os, needs_comma);
      element->Serialize(os);
    }
  }
  os << "]";
}

void JsSwitchStatement::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"SwitchStatement\"";
    JsNode::SerializeFields(os, needs_comma);
    JsStatement::SerializeFields(os, needs_comma);
    JsSwitchStatement::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsThrowStatement
// =============================================================================

void JsThrowStatement::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"argument\":";
  argument_->Serialize(os);
}

void JsThrowStatement::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"ThrowStatement\"";
    JsNode::SerializeFields(os, needs_comma);
    JsStatement::SerializeFields(os, needs_comma);
    JsThrowStatement::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsCatchClause
// =============================================================================

void JsCatchClause::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  if (param_.has_value()) {
    os << "\"param\":";
    param_.value()->Serialize(os);
  } else {
    os << "\"param\":" << "null";
  }
  MaybeAddComma(os, needs_comma);
  os << "\"body\":";
  body_->Serialize(os);
}

void JsCatchClause::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"CatchClause\"";
    JsNode::SerializeFields(os, needs_comma);
    JsCatchClause::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsTryStatement
// =============================================================================

void JsTryStatement::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"block\":";
  block_->Serialize(os);
  MaybeAddComma(os, needs_comma);
  if (handler_.has_value()) {
    os << "\"handler\":";
    handler_.value()->Serialize(os);
  } else {
    os << "\"handler\":" << "null";
  }
  MaybeAddComma(os, needs_comma);
  if (finalizer_.has_value()) {
    os << "\"finalizer\":";
    finalizer_.value()->Serialize(os);
  } else {
    os << "\"finalizer\":" << "null";
  }
}

void JsTryStatement::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"TryStatement\"";
    JsNode::SerializeFields(os, needs_comma);
    JsStatement::SerializeFields(os, needs_comma);
    JsTryStatement::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsWhileStatement
// =============================================================================

void JsWhileStatement::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"test\":";
  test_->Serialize(os);
  MaybeAddComma(os, needs_comma);
  os << "\"body\":";
  body_->Serialize(os);
}

void JsWhileStatement::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"WhileStatement\"";
    JsNode::SerializeFields(os, needs_comma);
    JsStatement::SerializeFields(os, needs_comma);
    JsWhileStatement::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsDoWhileStatement
// =============================================================================

void JsDoWhileStatement::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"body\":";
  body_->Serialize(os);
  MaybeAddComma(os, needs_comma);
  os << "\"test\":";
  test_->Serialize(os);
}

void JsDoWhileStatement::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"DoWhileStatement\"";
    JsNode::SerializeFields(os, needs_comma);
    JsStatement::SerializeFields(os, needs_comma);
    JsDoWhileStatement::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsDeclaration
// =============================================================================

void JsDeclaration::SerializeFields(std::ostream& os, bool &needs_comma) const {
}

// =============================================================================
// JsVariableDeclarator
// =============================================================================

void JsVariableDeclarator::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"id\":";
  id_->Serialize(os);
  MaybeAddComma(os, needs_comma);
  if (init_.has_value()) {
    os << "\"init\":";
    init_.value()->Serialize(os);
  } else {
    os << "\"init\":" << "null";
  }
}

void JsVariableDeclarator::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"VariableDeclarator\"";
    JsNode::SerializeFields(os, needs_comma);
    JsVariableDeclarator::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsVariableDeclaration
// =============================================================================

void JsVariableDeclaration::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"declarations\":" << "[";
  {
    bool needs_comma = false;
    for (const auto& element : declarations_) {
      MaybeAddComma(os, needs_comma);
      element->Serialize(os);
    }
  }
  os << "]";
  MaybeAddComma(os, needs_comma);
  os << "\"kind\":" << (nlohmann::json(kind_)).dump();
}

void JsVariableDeclaration::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"VariableDeclaration\"";
    JsNode::SerializeFields(os, needs_comma);
    JsStatement::SerializeFields(os, needs_comma);
    JsDeclaration::SerializeFields(os, needs_comma);
    JsVariableDeclaration::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsForStatement
// =============================================================================

void JsForStatement::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  if (init_.has_value()) {
    switch (init_.value().index()) {
      case 0: {
        os << "\"init\":";
        std::get<0>(init_.value())->Serialize(os);
        break;
      }
      case 1: {
        os << "\"init\":";
        std::get<1>(init_.value())->Serialize(os);
        break;
      }
      default:
        LOG(FATAL) << "Unreachable code.";
    }
  } else {
    os << "\"init\":" << "null";
  }
  MaybeAddComma(os, needs_comma);
  if (test_.has_value()) {
    os << "\"test\":";
    test_.value()->Serialize(os);
  } else {
    os << "\"test\":" << "null";
  }
  MaybeAddComma(os, needs_comma);
  if (update_.has_value()) {
    os << "\"update\":";
    update_.value()->Serialize(os);
  } else {
    os << "\"update\":" << "null";
  }
  MaybeAddComma(os, needs_comma);
  os << "\"body\":";
  body_->Serialize(os);
}

void JsForStatement::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"ForStatement\"";
    JsNode::SerializeFields(os, needs_comma);
    JsStatement::SerializeFields(os, needs_comma);
    JsForStatement::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsForInStatement
// =============================================================================

void JsForInStatement::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  switch (left_.index()) {
    case 0: {
      os << "\"left\":";
      std::get<0>(left_)->Serialize(os);
      break;
    }
    case 1: {
      os << "\"left\":";
      std::get<1>(left_)->Serialize(os);
      break;
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
  MaybeAddComma(os, needs_comma);
  os << "\"right\":";
  right_->Serialize(os);
  MaybeAddComma(os, needs_comma);
  os << "\"body\":";
  body_->Serialize(os);
}

void JsForInStatement::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"ForInStatement\"";
    JsNode::SerializeFields(os, needs_comma);
    JsStatement::SerializeFields(os, needs_comma);
    JsForInStatement::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsForOfStatement
// =============================================================================

void JsForOfStatement::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  switch (left_.index()) {
    case 0: {
      os << "\"left\":";
      std::get<0>(left_)->Serialize(os);
      break;
    }
    case 1: {
      os << "\"left\":";
      std::get<1>(left_)->Serialize(os);
      break;
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
  MaybeAddComma(os, needs_comma);
  os << "\"right\":";
  right_->Serialize(os);
  MaybeAddComma(os, needs_comma);
  os << "\"body\":";
  body_->Serialize(os);
  MaybeAddComma(os, needs_comma);
  os << "\"await\":" << (nlohmann::json(await_)).dump();
}

void JsForOfStatement::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"ForOfStatement\"";
    JsNode::SerializeFields(os, needs_comma);
    JsStatement::SerializeFields(os, needs_comma);
    JsForOfStatement::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsFunctionDeclaration
// =============================================================================

void JsFunctionDeclaration::SerializeFields(std::ostream& os, bool &needs_comma) const {
}

void JsFunctionDeclaration::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"FunctionDeclaration\"";
    JsNode::SerializeFields(os, needs_comma);
    JsFunction::SerializeFields(os, needs_comma);
    JsBlockStatementFunction::SerializeFields(os, needs_comma);
    JsStatement::SerializeFields(os, needs_comma);
    JsDeclaration::SerializeFields(os, needs_comma);
    JsFunctionDeclaration::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsSuper
// =============================================================================

void JsSuper::SerializeFields(std::ostream& os, bool &needs_comma) const {
}

void JsSuper::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"Super\"";
    JsNode::SerializeFields(os, needs_comma);
    JsSuper::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsImport
// =============================================================================

void JsImport::SerializeFields(std::ostream& os, bool &needs_comma) const {
}

void JsImport::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"Import\"";
    JsNode::SerializeFields(os, needs_comma);
    JsImport::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsThisExpression
// =============================================================================

void JsThisExpression::SerializeFields(std::ostream& os, bool &needs_comma) const {
}

void JsThisExpression::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"ThisExpression\"";
    JsNode::SerializeFields(os, needs_comma);
    JsExpression::SerializeFields(os, needs_comma);
    JsThisExpression::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsArrowFunctionExpression
// =============================================================================

void JsArrowFunctionExpression::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  switch (body_.index()) {
    case 0: {
      os << "\"body\":";
      std::get<0>(body_)->Serialize(os);
      break;
    }
    case 1: {
      os << "\"body\":";
      std::get<1>(body_)->Serialize(os);
      break;
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
}

void JsArrowFunctionExpression::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"ArrowFunctionExpression\"";
    JsNode::SerializeFields(os, needs_comma);
    JsFunction::SerializeFields(os, needs_comma);
    JsExpression::SerializeFields(os, needs_comma);
    JsArrowFunctionExpression::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsYieldExpression
// =============================================================================

void JsYieldExpression::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  if (argument_.has_value()) {
    os << "\"argument\":";
    argument_.value()->Serialize(os);
  } else {
    os << "\"argument\":" << "null";
  }
  MaybeAddComma(os, needs_comma);
  os << "\"delegate\":" << (nlohmann::json(delegate_)).dump();
}

void JsYieldExpression::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"YieldExpression\"";
    JsNode::SerializeFields(os, needs_comma);
    JsExpression::SerializeFields(os, needs_comma);
    JsYieldExpression::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsAwaitExpression
// =============================================================================

void JsAwaitExpression::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  if (argument_.has_value()) {
    os << "\"argument\":";
    argument_.value()->Serialize(os);
  } else {
    os << "\"argument\":" << "null";
  }
}

void JsAwaitExpression::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"AwaitExpression\"";
    JsNode::SerializeFields(os, needs_comma);
    JsExpression::SerializeFields(os, needs_comma);
    JsAwaitExpression::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsSpreadElement
// =============================================================================

void JsSpreadElement::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"argument\":";
  argument_->Serialize(os);
}

void JsSpreadElement::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"SpreadElement\"";
    JsNode::SerializeFields(os, needs_comma);
    JsSpreadElement::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsArrayExpression
// =============================================================================

void JsArrayExpression::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"elements\":" << "[";
  {
    bool needs_comma = false;
    for (const auto& element : elements_) {
      MaybeAddComma(os, needs_comma);
      if (element.has_value()) {
        switch (element.value().index()) {
          case 0: {
            std::get<0>(element.value())->Serialize(os);
            break;
          }
          case 1: {
            std::get<1>(element.value())->Serialize(os);
            break;
          }
          default:
            LOG(FATAL) << "Unreachable code.";
        }
      } else {
        os << "null";
      }
    }
  }
  os << "]";
}

void JsArrayExpression::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"ArrayExpression\"";
    JsNode::SerializeFields(os, needs_comma);
    JsExpression::SerializeFields(os, needs_comma);
    JsArrayExpression::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsObjectMember
// =============================================================================

void JsObjectMember::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"key\":";
  key_->Serialize(os);
  MaybeAddComma(os, needs_comma);
  os << "\"computed\":" << (nlohmann::json(computed_)).dump();
}

// =============================================================================
// JsObjectProperty
// =============================================================================

void JsObjectProperty::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"shorthand\":" << (nlohmann::json(shorthand_)).dump();
  MaybeAddComma(os, needs_comma);
  switch (value_.index()) {
    case 0: {
      os << "\"value\":";
      std::get<0>(value_)->Serialize(os);
      break;
    }
    case 1: {
      os << "\"value\":";
      std::get<1>(value_)->Serialize(os);
      break;
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
}

void JsObjectProperty::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"ObjectProperty\"";
    JsNode::SerializeFields(os, needs_comma);
    JsObjectMember::SerializeFields(os, needs_comma);
    JsObjectProperty::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsObjectMethod
// =============================================================================

void JsObjectMethod::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"kind\":" << (nlohmann::json(kind_)).dump();
}

void JsObjectMethod::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"ObjectMethod\"";
    JsNode::SerializeFields(os, needs_comma);
    JsObjectMember::SerializeFields(os, needs_comma);
    JsFunction::SerializeFields(os, needs_comma);
    JsBlockStatementFunction::SerializeFields(os, needs_comma);
    JsObjectMethod::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsObjectExpression
// =============================================================================

void JsObjectExpression::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"properties\":" << "[";
  {
    bool needs_comma = false;
    for (const auto& element : properties__) {
      MaybeAddComma(os, needs_comma);
      switch (element.index()) {
        case 0: {
          std::get<0>(element)->Serialize(os);
          break;
        }
        case 1: {
          std::get<1>(element)->Serialize(os);
          break;
        }
        case 2: {
          std::get<2>(element)->Serialize(os);
          break;
        }
        default:
          LOG(FATAL) << "Unreachable code.";
      }
    }
  }
  os << "]";
}

void JsObjectExpression::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"ObjectExpression\"";
    JsNode::SerializeFields(os, needs_comma);
    JsExpression::SerializeFields(os, needs_comma);
    JsObjectExpression::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsFunctionExpression
// =============================================================================

void JsFunctionExpression::SerializeFields(std::ostream& os, bool &needs_comma) const {
}

void JsFunctionExpression::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"FunctionExpression\"";
    JsNode::SerializeFields(os, needs_comma);
    JsFunction::SerializeFields(os, needs_comma);
    JsBlockStatementFunction::SerializeFields(os, needs_comma);
    JsExpression::SerializeFields(os, needs_comma);
    JsFunctionExpression::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsUnaryExpression
// =============================================================================

void JsUnaryExpression::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"operator\":" << "\"" << JsUnaryOperatorToString(operator__) << "\"";
  MaybeAddComma(os, needs_comma);
  os << "\"prefix\":" << (nlohmann::json(prefix_)).dump();
  MaybeAddComma(os, needs_comma);
  os << "\"argument\":";
  argument_->Serialize(os);
}

void JsUnaryExpression::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"UnaryExpression\"";
    JsNode::SerializeFields(os, needs_comma);
    JsExpression::SerializeFields(os, needs_comma);
    JsUnaryExpression::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsUpdateExpression
// =============================================================================

void JsUpdateExpression::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"operator\":" << "\"" << JsUpdateOperatorToString(operator__) << "\"";
  MaybeAddComma(os, needs_comma);
  os << "\"argument\":";
  argument_->Serialize(os);
  MaybeAddComma(os, needs_comma);
  os << "\"prefix\":" << (nlohmann::json(prefix_)).dump();
}

void JsUpdateExpression::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"UpdateExpression\"";
    JsNode::SerializeFields(os, needs_comma);
    JsExpression::SerializeFields(os, needs_comma);
    JsUpdateExpression::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsBinaryExpression
// =============================================================================

void JsBinaryExpression::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"operator\":" << "\"" << JsBinaryOperatorToString(operator__) << "\"";
  MaybeAddComma(os, needs_comma);
  switch (left_.index()) {
    case 0: {
      os << "\"left\":";
      std::get<0>(left_)->Serialize(os);
      break;
    }
    case 1: {
      os << "\"left\":";
      std::get<1>(left_)->Serialize(os);
      break;
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
  MaybeAddComma(os, needs_comma);
  os << "\"right\":";
  right_->Serialize(os);
}

void JsBinaryExpression::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"BinaryExpression\"";
    JsNode::SerializeFields(os, needs_comma);
    JsExpression::SerializeFields(os, needs_comma);
    JsBinaryExpression::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsAssignmentExpression
// =============================================================================

void JsAssignmentExpression::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"operator\":" << "\"" << JsAssignmentOperatorToString(operator__) << "\"";
  MaybeAddComma(os, needs_comma);
  os << "\"left\":";
  left_->Serialize(os);
  MaybeAddComma(os, needs_comma);
  os << "\"right\":";
  right_->Serialize(os);
}

void JsAssignmentExpression::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"AssignmentExpression\"";
    JsNode::SerializeFields(os, needs_comma);
    JsExpression::SerializeFields(os, needs_comma);
    JsAssignmentExpression::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsLogicalExpression
// =============================================================================

void JsLogicalExpression::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"operator\":" << "\"" << JsLogicalOperatorToString(operator__) << "\"";
  MaybeAddComma(os, needs_comma);
  os << "\"left\":";
  left_->Serialize(os);
  MaybeAddComma(os, needs_comma);
  os << "\"right\":";
  right_->Serialize(os);
}

void JsLogicalExpression::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"LogicalExpression\"";
    JsNode::SerializeFields(os, needs_comma);
    JsExpression::SerializeFields(os, needs_comma);
    JsLogicalExpression::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsMemberExpression
// =============================================================================

void JsMemberExpression::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  switch (object_.index()) {
    case 0: {
      os << "\"object\":";
      std::get<0>(object_)->Serialize(os);
      break;
    }
    case 1: {
      os << "\"object\":";
      std::get<1>(object_)->Serialize(os);
      break;
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
  MaybeAddComma(os, needs_comma);
  switch (property_.index()) {
    case 0: {
      os << "\"property\":";
      std::get<0>(property_)->Serialize(os);
      break;
    }
    case 1: {
      os << "\"property\":";
      std::get<1>(property_)->Serialize(os);
      break;
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
  MaybeAddComma(os, needs_comma);
  os << "\"computed\":" << (nlohmann::json(computed_)).dump();
}

void JsMemberExpression::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"MemberExpression\"";
    JsNode::SerializeFields(os, needs_comma);
    JsExpression::SerializeFields(os, needs_comma);
    JsPattern::SerializeFields(os, needs_comma);
    JsLVal::SerializeFields(os, needs_comma);
    JsMemberExpression::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsOptionalMemberExpression
// =============================================================================

void JsOptionalMemberExpression::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"object\":";
  object_->Serialize(os);
  MaybeAddComma(os, needs_comma);
  switch (property_.index()) {
    case 0: {
      os << "\"property\":";
      std::get<0>(property_)->Serialize(os);
      break;
    }
    case 1: {
      os << "\"property\":";
      std::get<1>(property_)->Serialize(os);
      break;
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
  MaybeAddComma(os, needs_comma);
  os << "\"computed\":" << (nlohmann::json(computed_)).dump();
  MaybeAddComma(os, needs_comma);
  os << "\"optional\":" << (nlohmann::json(optional_)).dump();
}

void JsOptionalMemberExpression::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"OptionalMemberExpression\"";
    JsNode::SerializeFields(os, needs_comma);
    JsExpression::SerializeFields(os, needs_comma);
    JsOptionalMemberExpression::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsConditionalExpression
// =============================================================================

void JsConditionalExpression::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"test\":";
  test_->Serialize(os);
  MaybeAddComma(os, needs_comma);
  os << "\"alternate\":";
  alternate_->Serialize(os);
  MaybeAddComma(os, needs_comma);
  os << "\"consequent\":";
  consequent_->Serialize(os);
}

void JsConditionalExpression::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"ConditionalExpression\"";
    JsNode::SerializeFields(os, needs_comma);
    JsExpression::SerializeFields(os, needs_comma);
    JsConditionalExpression::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsCallExpression
// =============================================================================

void JsCallExpression::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  switch (callee_.index()) {
    case 0: {
      os << "\"callee\":";
      std::get<0>(callee_)->Serialize(os);
      break;
    }
    case 1: {
      os << "\"callee\":";
      std::get<1>(callee_)->Serialize(os);
      break;
    }
    case 2: {
      os << "\"callee\":";
      std::get<2>(callee_)->Serialize(os);
      break;
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
  MaybeAddComma(os, needs_comma);
  os << "\"arguments\":" << "[";
  {
    bool needs_comma = false;
    for (const auto& element : arguments_) {
      MaybeAddComma(os, needs_comma);
      switch (element.index()) {
        case 0: {
          std::get<0>(element)->Serialize(os);
          break;
        }
        case 1: {
          std::get<1>(element)->Serialize(os);
          break;
        }
        default:
          LOG(FATAL) << "Unreachable code.";
      }
    }
  }
  os << "]";
}

void JsCallExpression::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"CallExpression\"";
    JsNode::SerializeFields(os, needs_comma);
    JsExpression::SerializeFields(os, needs_comma);
    JsCallExpression::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsOptionalCallExpression
// =============================================================================

void JsOptionalCallExpression::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"callee\":";
  callee_->Serialize(os);
  MaybeAddComma(os, needs_comma);
  os << "\"arguments\":" << "[";
  {
    bool needs_comma = false;
    for (const auto& element : arguments_) {
      MaybeAddComma(os, needs_comma);
      switch (element.index()) {
        case 0: {
          std::get<0>(element)->Serialize(os);
          break;
        }
        case 1: {
          std::get<1>(element)->Serialize(os);
          break;
        }
        default:
          LOG(FATAL) << "Unreachable code.";
      }
    }
  }
  os << "]";
  MaybeAddComma(os, needs_comma);
  os << "\"optional\":" << (nlohmann::json(optional_)).dump();
}

void JsOptionalCallExpression::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"OptionalCallExpression\"";
    JsNode::SerializeFields(os, needs_comma);
    JsExpression::SerializeFields(os, needs_comma);
    JsOptionalCallExpression::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsNewExpression
// =============================================================================

void JsNewExpression::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  switch (callee_.index()) {
    case 0: {
      os << "\"callee\":";
      std::get<0>(callee_)->Serialize(os);
      break;
    }
    case 1: {
      os << "\"callee\":";
      std::get<1>(callee_)->Serialize(os);
      break;
    }
    case 2: {
      os << "\"callee\":";
      std::get<2>(callee_)->Serialize(os);
      break;
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
  MaybeAddComma(os, needs_comma);
  os << "\"arguments\":" << "[";
  {
    bool needs_comma = false;
    for (const auto& element : arguments_) {
      MaybeAddComma(os, needs_comma);
      switch (element.index()) {
        case 0: {
          std::get<0>(element)->Serialize(os);
          break;
        }
        case 1: {
          std::get<1>(element)->Serialize(os);
          break;
        }
        default:
          LOG(FATAL) << "Unreachable code.";
      }
    }
  }
  os << "]";
}

void JsNewExpression::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"NewExpression\"";
    JsNode::SerializeFields(os, needs_comma);
    JsExpression::SerializeFields(os, needs_comma);
    JsNewExpression::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsSequenceExpression
// =============================================================================

void JsSequenceExpression::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"expressions\":" << "[";
  {
    bool needs_comma = false;
    for (const auto& element : expressions_) {
      MaybeAddComma(os, needs_comma);
      element->Serialize(os);
    }
  }
  os << "]";
}

void JsSequenceExpression::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"SequenceExpression\"";
    JsNode::SerializeFields(os, needs_comma);
    JsExpression::SerializeFields(os, needs_comma);
    JsSequenceExpression::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsParenthesizedExpression
// =============================================================================

void JsParenthesizedExpression::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"expression\":";
  expression_->Serialize(os);
}

void JsParenthesizedExpression::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"ParenthesizedExpression\"";
    JsNode::SerializeFields(os, needs_comma);
    JsExpression::SerializeFields(os, needs_comma);
    JsPattern::SerializeFields(os, needs_comma);
    JsLVal::SerializeFields(os, needs_comma);
    JsParenthesizedExpression::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsTemplateElementValue
// =============================================================================

void JsTemplateElementValue::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  if (cooked_.has_value()) {
    os << "\"cooked\":" << (nlohmann::json(cooked_.value())).dump();
  } else {
    os << "\"cooked\":" << "null";
  }
  MaybeAddComma(os, needs_comma);
  os << "\"raw\":" << (nlohmann::json(raw_)).dump();
}

void JsTemplateElementValue::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    JsTemplateElementValue::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsTemplateElement
// =============================================================================

void JsTemplateElement::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"tail\":" << (nlohmann::json(tail_)).dump();
  MaybeAddComma(os, needs_comma);
  os << "\"value\":";
  value_->Serialize(os);
}

void JsTemplateElement::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"TemplateElement\"";
    JsNode::SerializeFields(os, needs_comma);
    JsTemplateElement::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsTemplateLiteral
// =============================================================================

void JsTemplateLiteral::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"quasis\":" << "[";
  {
    bool needs_comma = false;
    for (const auto& element : quasis_) {
      MaybeAddComma(os, needs_comma);
      element->Serialize(os);
    }
  }
  os << "]";
  MaybeAddComma(os, needs_comma);
  os << "\"expressions\":" << "[";
  {
    bool needs_comma = false;
    for (const auto& element : expressions_) {
      MaybeAddComma(os, needs_comma);
      element->Serialize(os);
    }
  }
  os << "]";
}

void JsTemplateLiteral::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"TemplateLiteral\"";
    JsNode::SerializeFields(os, needs_comma);
    JsExpression::SerializeFields(os, needs_comma);
    JsTemplateLiteral::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsTaggedTemplateExpression
// =============================================================================

void JsTaggedTemplateExpression::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"tag\":";
  tag_->Serialize(os);
  MaybeAddComma(os, needs_comma);
  os << "\"quasi\":";
  quasi_->Serialize(os);
}

void JsTaggedTemplateExpression::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"TaggedTemplateExpression\"";
    JsNode::SerializeFields(os, needs_comma);
    JsExpression::SerializeFields(os, needs_comma);
    JsTaggedTemplateExpression::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsRestElement
// =============================================================================

void JsRestElement::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"argument\":";
  argument_->Serialize(os);
}

void JsRestElement::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"RestElement\"";
    JsNode::SerializeFields(os, needs_comma);
    JsPattern::SerializeFields(os, needs_comma);
    JsLVal::SerializeFields(os, needs_comma);
    JsRestElement::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsObjectPattern
// =============================================================================

void JsObjectPattern::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"properties\":" << "[";
  {
    bool needs_comma = false;
    for (const auto& element : properties__) {
      MaybeAddComma(os, needs_comma);
      switch (element.index()) {
        case 0: {
          std::get<0>(element)->Serialize(os);
          break;
        }
        case 1: {
          std::get<1>(element)->Serialize(os);
          break;
        }
        default:
          LOG(FATAL) << "Unreachable code.";
      }
    }
  }
  os << "]";
}

void JsObjectPattern::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"ObjectPattern\"";
    JsNode::SerializeFields(os, needs_comma);
    JsPattern::SerializeFields(os, needs_comma);
    JsLVal::SerializeFields(os, needs_comma);
    JsObjectPattern::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsArrayPattern
// =============================================================================

void JsArrayPattern::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"elements\":" << "[";
  {
    bool needs_comma = false;
    for (const auto& element : elements_) {
      MaybeAddComma(os, needs_comma);
      if (element.has_value()) {
        element.value()->Serialize(os);
      } else {
        os << "null";
      }
    }
  }
  os << "]";
}

void JsArrayPattern::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"ArrayPattern\"";
    JsNode::SerializeFields(os, needs_comma);
    JsPattern::SerializeFields(os, needs_comma);
    JsLVal::SerializeFields(os, needs_comma);
    JsArrayPattern::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsAssignmentPattern
// =============================================================================

void JsAssignmentPattern::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"left\":";
  left_->Serialize(os);
  MaybeAddComma(os, needs_comma);
  os << "\"right\":";
  right_->Serialize(os);
}

void JsAssignmentPattern::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"AssignmentPattern\"";
    JsNode::SerializeFields(os, needs_comma);
    JsPattern::SerializeFields(os, needs_comma);
    JsLVal::SerializeFields(os, needs_comma);
    JsAssignmentPattern::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsClassMethod
// =============================================================================

void JsClassMethod::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"key\":";
  key_->Serialize(os);
  MaybeAddComma(os, needs_comma);
  os << "\"kind\":" << (nlohmann::json(kind_)).dump();
  MaybeAddComma(os, needs_comma);
  os << "\"computed\":" << (nlohmann::json(computed_)).dump();
  MaybeAddComma(os, needs_comma);
  os << "\"static\":" << (nlohmann::json(static__)).dump();
}

void JsClassMethod::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"ClassMethod\"";
    JsNode::SerializeFields(os, needs_comma);
    JsFunction::SerializeFields(os, needs_comma);
    JsBlockStatementFunction::SerializeFields(os, needs_comma);
    JsClassMethod::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsClassPrivateMethod
// =============================================================================

void JsClassPrivateMethod::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"key\":";
  key_->Serialize(os);
  MaybeAddComma(os, needs_comma);
  os << "\"kind\":" << (nlohmann::json(kind_)).dump();
  MaybeAddComma(os, needs_comma);
  os << "\"static\":" << (nlohmann::json(static__)).dump();
  if (computed_.has_value()) {
    MaybeAddComma(os, needs_comma);
    os << "\"computed\":" << (nlohmann::json(computed_.value())).dump();
  }
}

void JsClassPrivateMethod::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"ClassPrivateMethod\"";
    JsNode::SerializeFields(os, needs_comma);
    JsFunction::SerializeFields(os, needs_comma);
    JsBlockStatementFunction::SerializeFields(os, needs_comma);
    JsClassPrivateMethod::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsClassProperty
// =============================================================================

void JsClassProperty::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"key\":";
  key_->Serialize(os);
  MaybeAddComma(os, needs_comma);
  if (value_.has_value()) {
    os << "\"value\":";
    value_.value()->Serialize(os);
  } else {
    os << "\"value\":" << "null";
  }
  MaybeAddComma(os, needs_comma);
  os << "\"static\":" << (nlohmann::json(static__)).dump();
  MaybeAddComma(os, needs_comma);
  os << "\"computed\":" << (nlohmann::json(computed_)).dump();
}

void JsClassProperty::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"ClassProperty\"";
    JsNode::SerializeFields(os, needs_comma);
    JsClassProperty::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsClassPrivateProperty
// =============================================================================

void JsClassPrivateProperty::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"key\":";
  key_->Serialize(os);
  MaybeAddComma(os, needs_comma);
  if (value_.has_value()) {
    os << "\"value\":";
    value_.value()->Serialize(os);
  } else {
    os << "\"value\":" << "null";
  }
  MaybeAddComma(os, needs_comma);
  os << "\"static\":" << (nlohmann::json(static__)).dump();
}

void JsClassPrivateProperty::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"ClassPrivateProperty\"";
    JsNode::SerializeFields(os, needs_comma);
    JsClassPrivateProperty::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsClassBody
// =============================================================================

void JsClassBody::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"body\":" << "[";
  {
    bool needs_comma = false;
    for (const auto& element : body_) {
      MaybeAddComma(os, needs_comma);
      switch (element.index()) {
        case 0: {
          std::get<0>(element)->Serialize(os);
          break;
        }
        case 1: {
          std::get<1>(element)->Serialize(os);
          break;
        }
        case 2: {
          std::get<2>(element)->Serialize(os);
          break;
        }
        case 3: {
          std::get<3>(element)->Serialize(os);
          break;
        }
        default:
          LOG(FATAL) << "Unreachable code.";
      }
    }
  }
  os << "]";
}

void JsClassBody::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"ClassBody\"";
    JsNode::SerializeFields(os, needs_comma);
    JsClassBody::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsClass
// =============================================================================

void JsClass::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  if (super_class_.has_value()) {
    os << "\"superClass\":";
    super_class_.value()->Serialize(os);
  } else {
    os << "\"superClass\":" << "null";
  }
  MaybeAddComma(os, needs_comma);
  os << "\"body\":";
  body_->Serialize(os);
}

// =============================================================================
// JsClassDeclaration
// =============================================================================

void JsClassDeclaration::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  if (id_.has_value()) {
    os << "\"id\":";
    id_.value()->Serialize(os);
  } else {
    os << "\"id\":" << "null";
  }
}

void JsClassDeclaration::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"ClassDeclaration\"";
    JsNode::SerializeFields(os, needs_comma);
    JsClass::SerializeFields(os, needs_comma);
    JsStatement::SerializeFields(os, needs_comma);
    JsDeclaration::SerializeFields(os, needs_comma);
    JsClassDeclaration::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsClassExpression
// =============================================================================

void JsClassExpression::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  if (id_.has_value()) {
    os << "\"id\":";
    id_.value()->Serialize(os);
  } else {
    os << "\"id\":" << "null";
  }
}

void JsClassExpression::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"ClassExpression\"";
    JsNode::SerializeFields(os, needs_comma);
    JsClass::SerializeFields(os, needs_comma);
    JsExpression::SerializeFields(os, needs_comma);
    JsClassExpression::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsMetaProperty
// =============================================================================

void JsMetaProperty::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"meta\":";
  meta_->Serialize(os);
  MaybeAddComma(os, needs_comma);
  os << "\"property\":";
  property_->Serialize(os);
}

void JsMetaProperty::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"MetaProperty\"";
    JsNode::SerializeFields(os, needs_comma);
    JsExpression::SerializeFields(os, needs_comma);
    JsMetaProperty::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsModuleSpecifier
// =============================================================================

void JsModuleSpecifier::SerializeFields(std::ostream& os, bool &needs_comma) const {
}

// =============================================================================
// JsImportSpecifier
// =============================================================================

void JsImportSpecifier::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  switch (imported_.index()) {
    case 0: {
      os << "\"imported\":";
      std::get<0>(imported_)->Serialize(os);
      break;
    }
    case 1: {
      os << "\"imported\":";
      std::get<1>(imported_)->Serialize(os);
      break;
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
  MaybeAddComma(os, needs_comma);
  os << "\"local\":";
  local_->Serialize(os);
}

void JsImportSpecifier::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"ImportSpecifier\"";
    JsNode::SerializeFields(os, needs_comma);
    JsModuleSpecifier::SerializeFields(os, needs_comma);
    JsImportSpecifier::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsImportDefaultSpecifier
// =============================================================================

void JsImportDefaultSpecifier::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"local\":";
  local_->Serialize(os);
}

void JsImportDefaultSpecifier::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"ImportDefaultSpecifier\"";
    JsNode::SerializeFields(os, needs_comma);
    JsModuleSpecifier::SerializeFields(os, needs_comma);
    JsImportDefaultSpecifier::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsImportNamespaceSpecifier
// =============================================================================

void JsImportNamespaceSpecifier::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"local\":";
  local_->Serialize(os);
}

void JsImportNamespaceSpecifier::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"ImportNamespaceSpecifier\"";
    JsNode::SerializeFields(os, needs_comma);
    JsModuleSpecifier::SerializeFields(os, needs_comma);
    JsImportNamespaceSpecifier::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsImportAttribute
// =============================================================================

void JsImportAttribute::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"key\":";
  key_->Serialize(os);
  MaybeAddComma(os, needs_comma);
  os << "\"value\":";
  value_->Serialize(os);
}

void JsImportAttribute::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"ImportAttribute\"";
    JsNode::SerializeFields(os, needs_comma);
    JsImportAttribute::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsImportDeclaration
// =============================================================================

void JsImportDeclaration::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"specifiers\":" << "[";
  {
    bool needs_comma = false;
    for (const auto& element : specifiers_) {
      MaybeAddComma(os, needs_comma);
      switch (element.index()) {
        case 0: {
          std::get<0>(element)->Serialize(os);
          break;
        }
        case 1: {
          std::get<1>(element)->Serialize(os);
          break;
        }
        case 2: {
          std::get<2>(element)->Serialize(os);
          break;
        }
        default:
          LOG(FATAL) << "Unreachable code.";
      }
    }
  }
  os << "]";
  MaybeAddComma(os, needs_comma);
  os << "\"source\":";
  source_->Serialize(os);
  if (assertions_.has_value()) {
    MaybeAddComma(os, needs_comma);
    os << "\"assertions\":";
    assertions_.value()->Serialize(os);
  }
}

void JsImportDeclaration::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"ImportDeclaration\"";
    JsNode::SerializeFields(os, needs_comma);
    JsModuleDeclaration::SerializeFields(os, needs_comma);
    JsImportDeclaration::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsExportSpecifier
// =============================================================================

void JsExportSpecifier::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  switch (exported_.index()) {
    case 0: {
      os << "\"exported\":";
      std::get<0>(exported_)->Serialize(os);
      break;
    }
    case 1: {
      os << "\"exported\":";
      std::get<1>(exported_)->Serialize(os);
      break;
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
  if (local_.has_value()) {
    MaybeAddComma(os, needs_comma);
    switch (local_.value().index()) {
      case 0: {
        os << "\"local\":";
        std::get<0>(local_.value())->Serialize(os);
        break;
      }
      case 1: {
        os << "\"local\":";
        std::get<1>(local_.value())->Serialize(os);
        break;
      }
      default:
        LOG(FATAL) << "Unreachable code.";
    }
  }
}

void JsExportSpecifier::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"ExportSpecifier\"";
    JsNode::SerializeFields(os, needs_comma);
    JsModuleSpecifier::SerializeFields(os, needs_comma);
    JsExportSpecifier::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsExportNamedDeclaration
// =============================================================================

void JsExportNamedDeclaration::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  if (declaration_.has_value()) {
    os << "\"declaration\":";
    declaration_.value()->Serialize(os);
  } else {
    os << "\"declaration\":" << "null";
  }
  MaybeAddComma(os, needs_comma);
  os << "\"specifiers\":" << "[";
  {
    bool needs_comma = false;
    for (const auto& element : specifiers_) {
      MaybeAddComma(os, needs_comma);
      element->Serialize(os);
    }
  }
  os << "]";
  MaybeAddComma(os, needs_comma);
  if (source_.has_value()) {
    os << "\"source\":";
    source_.value()->Serialize(os);
  } else {
    os << "\"source\":" << "null";
  }
  if (assertions_.has_value()) {
    MaybeAddComma(os, needs_comma);
    os << "\"assertions\":" << "[";
    {
      bool needs_comma = false;
      for (const auto& element : assertions_.value()) {
        MaybeAddComma(os, needs_comma);
        element->Serialize(os);
      }
    }
    os << "]";
  }
}

void JsExportNamedDeclaration::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"ExportNamedDeclaration\"";
    JsNode::SerializeFields(os, needs_comma);
    JsModuleDeclaration::SerializeFields(os, needs_comma);
    JsExportNamedDeclaration::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsExportDefaultDeclaration
// =============================================================================

void JsExportDefaultDeclaration::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  switch (declaration_.index()) {
    case 0: {
      os << "\"declaration\":";
      std::get<0>(declaration_)->Serialize(os);
      break;
    }
    case 1: {
      os << "\"declaration\":";
      std::get<1>(declaration_)->Serialize(os);
      break;
    }
    case 2: {
      os << "\"declaration\":";
      std::get<2>(declaration_)->Serialize(os);
      break;
    }
    default:
      LOG(FATAL) << "Unreachable code.";
  }
}

void JsExportDefaultDeclaration::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"ExportDefaultDeclaration\"";
    JsNode::SerializeFields(os, needs_comma);
    JsModuleDeclaration::SerializeFields(os, needs_comma);
    JsExportDefaultDeclaration::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// =============================================================================
// JsExportAllDeclaration
// =============================================================================

void JsExportAllDeclaration::SerializeFields(std::ostream& os, bool &needs_comma) const {
  MaybeAddComma(os, needs_comma);
  os << "\"source\":";
  source_->Serialize(os);
  if (assertions_.has_value()) {
    MaybeAddComma(os, needs_comma);
    os << "\"assertions\":" << "[";
    {
      bool needs_comma = false;
      for (const auto& element : assertions_.value()) {
        MaybeAddComma(os, needs_comma);
        element->Serialize(os);
      }
    }
    os << "]";
  }
}

void JsExportAllDeclaration::Serialize(std::ostream& os) const {
  os << "{";
  {
    bool needs_comma = false;
    MaybeAddComma(os, needs_comma);
    os << "\"type\":\"ExportAllDeclaration\"";
    JsNode::SerializeFields(os, needs_comma);
    JsModuleDeclaration::SerializeFields(os, needs_comma);
    JsExportAllDeclaration::SerializeFields(os, needs_comma);
  }
  os << "}";
}

// clang-format on
// NOLINTEND(whitespace/line_length)
// IWYU pragma: end_keep

}  // namespace maldoca
